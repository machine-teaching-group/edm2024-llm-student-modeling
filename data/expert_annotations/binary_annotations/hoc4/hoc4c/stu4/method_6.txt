You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	v	#	#	#	#	#	#	
6	#	#	#	.	.	#	#	#	#	#	
7	#	#	#	#	+	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
Great, let's dive into the tasks and analyze the student's attempt code for Target Task 1.
Reference Task 1:
The reference task is a simple maze challenge where the goal is to bring the avatar to the goal cell by moving forward, turning left or right, and repeating the process until the avatar reaches the goal. The solution code for this task is shown below:
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

Target Task 1:
The target task is similar to the reference task, but with a slight variation. The goal cell is located at the top-left corner of the grid, and the avatar starts at the bottom-left corner. The student's attempt code for this task is shown below:
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

Misconceptions and Behavior:
The student's attempt code for Target Task 1 has the following misconceptions and behavior:

Moving the avatar to the top-left corner: The student's code moves the avatar to the top-left corner of the grid, which is not the correct starting position for the task. The avatar should start at the bottom-left corner of the grid.
Using turnLeft and turnRight instead of turnLeftwards and turnRightwards: The student's code uses the turnLeft and turnRight blocks instead of the turnLeftwards and turnRightwards blocks, which are the correct blocks to use in this task.
Not using moveForward: The student's code does not use the moveForward block, which is necessary to move the avatar forward in the grid.
Not using the goal block: The student's code does not use the goal block to bring the avatar to the goal cell. Instead, it only moves the avatar around the grid without reaching the goal.
Using the wrong blocks: The student's code uses the wrong blocks in some cases. For example, in the first line of the code, the student uses the turnLeft block instead of the turnLeftwards block to turn the avatar leftwards.
Conclusion:
Based on the student's