You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnLeft
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	#	#	#	#	#	#	
6	#	#	v	#	#	#	#	#	#	#	
7	+	#	.	#	#	#	#	#	#	#	
8	.	.	.	#	#	#	#	#	#	#	
9	.	#	.	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
Sure, I'm ready to help you with the task!
So, the reference task is a 10x10 maze, and the goal is to get the AVATAR to the GOAL cell (represented by '>') using the basic navigation blocks (moveForward, turnLeft, turnRight) and conditionals (pathAhead, pathLeft, pathRight, goal).
The student's attempt code for the reference task is:
def Run(){
moveForward
turnLeft
moveForward
}
As you can see, the student has used the moveForward block twice, but they have not used the turnLeft or turnRight blocks at all. This is a common mistake that students make in this domain, as they often overlook the importance of using the turn blocks to change the direction of the AVATAR.
Now, let's move on to the target task.
The target task is also a 10x10 maze, but this time the goal is to get the AVATAR to the GOAL cell through a specific path (represented by 'v' symbols) using the basic navigation blocks and conditionals. The student's attempt code for the target task is:
[/INST] Great, let's analyze the student's attempt code for the target task.
The student has written the following code:
def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
}
At first glance, the code looks similar to the reference task, but there are some differences that we can observe:

The student has used the moveForward block three times instead of two, which is not necessary in this task.
The student has used the turnRight block after the first moveForward block, but they have not used the turnLeft block after the second moveForward block. This is a mistake, as the student needs to use both turnLeft and turnRight blocks to navigate through the maze.
The student has not used the conditionals (pathAhead, pathLeft, pathRight, goal) in their code, which is crucial for solving the target task.
Let's break down the student's code and identify the misconceptions:
The student seems to be relying too heavily on the moveForward