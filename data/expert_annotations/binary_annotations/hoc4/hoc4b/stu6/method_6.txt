You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	moveForward
	turnLeft
	turnRight
	turnRight
	turnLeft
	moveForward
	turnLeft
	turnRight
	turnRight
	turnLeft
	turnLeft
	moveForward
	turnLeft
	turnRight
	turnRight
	turnRight
	turnRight
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	turnRight
	turnLeft
	turnLeft
	moveForward
	turnLeft
	turnRight
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	#	#	#	#	#	#	
6	#	#	v	#	#	#	#	#	#	#	
7	+	#	.	#	#	#	#	#	#	#	
8	.	.	.	#	#	#	#	#	#	#	
9	.	#	.	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
Great! Let's dive into the task and provide explanations for the student's attempt code.
Reference Task 1:
The student's attempt code is shown below:
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	turnLeft
	moveForward
}

The student's code is trying to solve the reference task, but there are several misconceptions and mistakes:

The student has not used any conditionals in their code, even though they are available in the visual programming domain. This means that the code will always execute the same actions, regardless of the current state of the maze.
The student has used the moveForward action multiple times without checking if the AVATAR has moved to the GOAL cell. This means that the code will not stop until the AVATAR has reached the GOAL, even if there are other paths available.
The student has used the turnLeft and turnRight actions without checking if the AVATAR is facing the correct direction. This means that the code will turn the AVATAR in the wrong direction, leading to incorrect movements.
The student has not used any loops to repeat the code until the AVATAR reaches the GOAL. This means that the code will only execute once, even though the AVATAR may need to move multiple times to reach the GOAL.
Target Task 1:
The student's attempt code for the target task is similar to their code for the reference task, but with some additional mistakes:
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	turnLeft
	turnRight
	turnLeft
}

The student's mistakes in this code are similar to those in their code for the reference task:

The student has not used any conditionals to check if the AVATAR has reached the GOAL. This means that the code will not stop until the AVATAR has reached the GOAL, even if there are other paths available.
The student has used the moveForward action without checking if the AVATAR has moved to the GOAL cell. This means that the code will not stop until the AVATAR has reached the GOAL, even if there are other paths available.
The student