You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	.	#	#	#	#	#	#	
4	#	#	#	.	#	#	#	#	#	#	
5	#	#	#	.	#	#	#	#	#	#	
6	.	.	.	.	.	.	#	#	#	#	
7	#	.	#	#	#	.	#	#	#	#	
8	#	.	#	+	#	.	#	#	#	#	
9	#	.	.	.	#	^	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnLeft
			moveForward
		}
		Else{
			moveForward
		}
	}
}

--- Target Task 1: Student attempt ---
In the reference task, the student's behavior and misconceptions in the attempt code can be observed as follows:

1. The student correctly understands the concept of using a `RepeatUntil` loop to perform a series of actions until a condition is met (in this case, until reaching the goal).
2. The student correctly uses the `If` block to check the condition `pathAhead`, which checks if there is a path in front of the avatar.
3. However, the student's misconception lies in the `Else` branch of the `If` block. Instead of making a left turn when there is no path ahead (which is the correct behavior in the reference solution), the student's code makes a right turn. This means that the student's avatar will keep turning right whenever it encounters a wall, which will lead to it going in circles and not reaching the goal.

Now, for the target task, let's synthesize an attempt code that captures the same student's behavior and misconceptions:

--- Target Task 1: Student attempt (Synthesized) ---

```python
def Run():
    RepeatUntil(goal):
        If(pathRight){  # Misconception: Checking path to the right
            turnRight  # Misconception: Turning right when there's a path to the right
        }
        Else{
            moveForward
        }
```

In this synthesized attempt, the student continues with the misconception of checking the path to the right and turning right when there's a path to the right. This behavior is consistent with their previous attempt in the reference task, where they turned right instead of left. This code will likely result in the avatar not reaching the goal in the target task as well, as it will keep turning right when it encounters walls.