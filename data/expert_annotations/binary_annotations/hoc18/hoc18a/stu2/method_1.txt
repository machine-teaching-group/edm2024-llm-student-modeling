You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnLeft
			moveForward
		}
		Else{
			moveForward
		}
	}
}

--- Target Task 1: Grid ---
1	#	#	#	.	#	#	#	#	#	#	
2	.	.	.	.	#	#	#	#	#	#	
3	.	#	#	.	#	#	#	#	#	#	
4	^	#	#	.	#	#	#	#	#	#	
5	#	#	#	.	#	#	#	#	#	#	
6	.	.	.	.	#	#	#	#	#	#	
7	#	#	#	.	#	#	#	#	#	#	
8	#	#	#	+	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}

--- Target Task 1: Student attempt ---
In the reference task, we have an initial grid, a solution code, and a student's attempt code. Let's first analyze the student's behavior and misconceptions in the attempt code for the reference task:

**Reference Task 1: Student Attempt Analysis:**
1. The student uses a `RepeatUntil` loop, which is a good choice as it keeps executing the instructions until the goal is reached.
2. Inside the loop, the student uses an `If` condition with `pathLeft`. This means that if there is a path to the left of the avatar, it should turn left and move forward.
3. In the `Else` block, the student simply moves forward.

**Misconceptions and Behavior:**
- The student's main misconception here is in the condition used in the `If` block. They are checking if there is a path to the left (`pathLeft`) instead of checking if there is a path ahead (`pathAhead`). This means that the avatar will turn left and move forward only if there's a path to the left, which might not always lead to the goal.
- Additionally, the student is not handling the case where there's no path to the left, which could lead to the avatar crashing into walls.

Now, for the new target task, let's synthesize an attempt code that captures the same student's behavior and misconceptions:

**Target Task 1: Student Attempt Synthesis:**
```python
def Run(){
	RepeatUntil(goal){
		If(pathRight){  # Misconception: Checking path to the right
			moveForward
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
```

In this synthesized attempt code, the student continues to use the `RepeatUntil` loop, which is a good choice. However, they still have the misconception of checking the path to the right (`pathRight`) instead of checking the path ahead (`pathAhead`). This will likely result in the avatar turning right and moving forward when it can, which may or may not lead to the goal. The student still hasn't corrected this misconception.

Additionally, the student does not handle the case where there's no path to the right, which could lead to the avatar crashing into walls on the right side. This behavior replicates the previous misconception observed in the reference task.