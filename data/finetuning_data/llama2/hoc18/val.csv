system_prompt,user_prompt,output
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	.	#	#	.	#	.	#	#	#	.
3	#	#	#	#	#	#	#	.	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	.	#	#	#	.
6	#	#	.	#	#	#	#	#	#	.
7	#	#	.	#	#	#	.	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	^	.
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	#	#	#
2	.	v	#	.	.	#	#	#	.	#
3	.	#	#	#	#	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	.
6	.	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	.	#	#
8	.	#	#	#	.	#	#	#	#	.
9	.	#	#	.	#	#	#	#	#	#
10	+	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	.	#	#	#	#	.	#
4	#	#	#	#	.	#	#	.	#	#
5	#	.	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	+	#	#	#	#	#	#	#
9	#	v	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	.	#	#
3	.	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	.	^	#	#	#	#
6	#	.	#	#	+	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	.	#	#	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	.
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	.	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	.	.
7	#	.	.	#	#	#	#	#	#	.
8	#	#	#	#	#	.	#	#	.	+
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	.	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	.	.	#	#	+	.	.	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	<	#	#	#	#
6	#	#	+	#	.	#	#	#	#	#
7	#	#	.	#	.	#	#	#	#	#
8	#	#	.	.	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	.	+	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	.	.	.	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	.	#	#	#
3	.	#	#	#	#	#	#	#	#	.
4	.	#	#	#	#	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	.
9	#	#	#	#	#	#	#	+	>	#
10	#	#	.	#	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	.	#	.	#	#
7	#	.	.	#	#	#	.	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	.	#	#	#	#	#	#	#
10	#	+	.	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	.
4	#	.	#	#	.	#	#	#	#	#
5	#	.	#	#	#	.	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	.	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	.	.	#	.	.	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	.	#	#	.	.	#	#	#	#
7	#	#	#	#	.	.	#	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	+	.	.	.	.	.	.	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	<	#	#	#	#	#	#	#	#
10	+	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	.	#	.	#	#	#
8	#	#	#	#	#	.	#	+	.	#
9	#	#	#	#	#	#	.	#	^	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	.	.	#	#	#	#
4	#	#	#	.	#	.	#	#	#	#
5	#	#	#	+	#	^	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	+	.	.	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	>	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	.	.	+
2	.	#	#	#	#	#	.	#	v	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	.	#	.	#	#	#
7	#	#	#	#	.	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	.	#	#
4	#	#	.	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	+	.	#	#	#	.	#	#	#	#
9	.	>	#	#	#	#	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	.	.	#	.	#	#	#
3	#	+	.	.	.	.	.	.	.	#
4	#	#	.	#	.	#	#	#	.	#
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	#	.	#	#	.	.	.
7	#	#	#	.	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			moveForward
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	+
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	>	.	.	.	.	.	.	.	.
10	#	#	#	#	.	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			moveForward
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	#	#	#	.	.	>	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	^	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	+	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	+	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	>	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	.	.	.	#	#	#	#
4	#	#	.	.	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	#	+	#	.	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	v	#	.	#	#	#	#	#	#
10	#	.	.	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	.	.	>	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	.	.	+	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	.	.	.	#
7	#	#	#	#	#	.	#	#	.	#
8	#	#	#	#	#	.	#	#	.	#
9	#	#	#	#	#	+	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	+
2	#	#	#	#	#	#	#	.	.	#
3	#	.	#	#	#	#	.	.	#	#
4	#	#	.	#	#	.	.	#	#	#
5	.	.	.	.	.	.	.	.	#	#
6	#	#	.	.	.	.	#	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	#	.	.	#	#	#	#	.	#	#
9	.	>	#	#	#	#	#	#	#	#
10	#	.	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	v	.	#	#	#	#	.	#	#
3	#	#	.	.	.	#	#	.	#	#
4	.	#	#	.	.	#	#	#	.	#
5	#	#	#	#	.	.	#	#	.	#
6	#	#	#	#	#	.	.	#	.	.
7	#	#	.	#	#	#	.	.	.	#
8	#	#	#	#	#	.	#	.	.	#
9	#	#	#	#	#	#	#	#	+	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	.	.	.	#	#	#	#
2	#	#	.	#	#	.	#	#	+	#
3	#	#	#	#	#	#	#	#	.	#
4	#	.	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	.
6	#	#	#	#	#	.	#	#	.	#
7	#	#	.	.	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	.	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	+	.	.	.	.	.	.	.	^	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	.	#	.	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	.	#	#	#	#	#	#	.
10	#	.	#	.	.	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	.	#	#	#	#	^	.	#	#	#
6	#	.	#	#	#	.	+	#	#	#
7	.	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	.	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	#	#	#	.	#	#	#	.	<	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	+	.	.	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	.	.	^	#	.	#	#
6	#	#	#	.	#	#	#	.	#	#
7	#	#	#	.	.	.	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnLeft
		}
		Else{
			turnRight
			turnLeft
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	.	.	.	.	.	<	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	.	+	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnLeft
		}
		Else{
			turnRight
			turnLeft
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	>	.
3	#	#	#	.	#	.	#	#	#	.
4	#	#	#	#	#	.	#	.	#	.
5	#	#	#	#	#	#	#	#	.	.
6	#	#	.	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	.	#	#	#	.	.
10	#	#	#	#	#	#	#	.	#	+

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		turnLeft
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	.	#	#	#	#	#	#	#
3	+	.	#	#	#	#	#	#	.	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	.	#	#
7	.	#	#	.	#	.	#	#	#	#
8	.	#	#	#	.	#	#	#	.	.
9	.	<	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		turnLeft
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	+	.	.	.	.	.	.	.	<	#
10	#	.	.	#	.	#	.	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			turnLeft
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	.	.	#	#	#	#	#	#	#
10	#	+	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			turnLeft
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	.
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	+	>	#	.	#	#
6	#	#	.	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	.	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	.
2	#	#	#	#	#	#	#	#	<	+
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	.	#	#	#	#	.	.
5	#	#	.	#	#	#	#	#	#	.
6	.	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	.	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	.	#	#	#	#	#	#	.	>	#
10	#	#	#	.	#	#	#	+	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	+	.	#
2	.	#	#	#	#	#	#	#	v	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	#	#	.	#	#	#	.	#
5	#	#	#	#	#	.	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	.	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	.	.	#	#	#	#	.	.	#
4	#	#	.	#	#	#	#	#	#	#
5	.	#	.	#	#	#	.	#	.	#
6	#	#	.	.	.	.	.	#	#	#
7	.	#	.	.	.	.	+	#	#	#
8	#	.	.	.	.	.	.	.	.	.
9	#	>	.	#	#	#	.	#	#	#
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	#	.	.	#
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	+	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	#	.	.	#	.	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	.	>	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	+	.	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	.	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	.	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	.	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	.	+	#	#	.	#	#	.	.
8	#	.	#	#	#	#	#	#	#	#
9	#	<	#	#	#	#	#	#	.	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	#
2	#	<	.	.	#	#	#	#	#	#
3	#	#	.	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	.	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	.	.	+	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	.	.	.	+
4	#	#	#	#	#	.	#	#	#	.
5	#	#	.	#	#	v	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	.	.	^	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	.	+	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	+	.	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	v	.	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	v	.	.	.	.	.	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	.	#	.	#	#	#
7	#	#	#	#	#	#	.	#	.	.
8	#	#	#	.	#	#	.	#	#	#
9	.	#	#	#	.	.	+	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
		moveForward
		turnLeft
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	.	+	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	.	.	#	#	#
7	#	#	#	#	.	#	.	.	.	#
8	#	#	#	#	.	#	.	#	.	#
9	#	#	#	#	.	#	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
		moveForward
		turnLeft
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	.	^	.	.	.	.	.	.	+	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	+	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	.	#
8	#	.	#	#	#	.	.	#	#	#
9	#	<	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	.	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	#	#	#	.	.	#	#
9	.	>	#	#	#	#	#	#	#	#
10	+	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	#	#	.	.	#	#	#	.	<	.
3	#	.	#	#	.	#	#	#	#	#
4	#	.	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	.	#	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	+	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	^	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	+
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	.	.	.	#	#	#
2	#	#	.	#	#	#	.	.	#	#
3	#	#	.	#	#	#	.	#	#	#
4	#	#	.	#	#	#	.	#	#	#
5	#	#	+	#	#	v	.	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			moveForward
		}
		turnRight
		If(pathLeft){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			moveForward
			moveForward
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	.	.	.	.	.	#	#	#	#
5	#	.	#	#	#	>	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	.	.	.	+	.	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			moveForward
		}
		turnRight
		If(pathLeft){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			moveForward
			moveForward
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	+	#	#	#	#	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	<	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	^	.	.	.	#	#	#	#	.
3	#	#	#	.	#	#	#	.	#	#
4	#	#	#	.	.	#	#	.	.	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	+	#	#	#	#	#
7	#	#	#	.	.	#	#	#	#	#
8	#	#	#	#	#	.	.	#	.	#
9	#	#	#	#	#	.	#	.	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathRight){
			turnRight
			moveForward
		}
		Else{
			turnLeft
		}
		moveForward
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	.	.	.	#	#	#
6	#	#	+	.	.	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathRight){
			turnRight
			moveForward
		}
		Else{
			turnLeft
		}
		moveForward
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	+	#	#	.	#	#	#	#
2	.	v	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	.	.	#	#
2	#	>	#	.	#	#	.	#	#	#
3	#	.	#	#	.	#	.	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	.	+	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	.
8	.	.	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	+	.	#	#	#	#	#	#
2	#	>	#	.	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	.	#	<	#
10	#	#	#	#	#	#	.	+	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	+
2	#	#	#	#	#	#	#	#	>	.
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	.	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	v	#	#	#	.	#	#	#	#
3	#	.	+	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	.	#	#	.	.	#	#
7	.	.	#	.	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	.	#	#	#	.	#	v	#
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	#	#	#	#	#	.	+
5	#	#	#	.	#	#	#	#	.	#
6	#	#	#	.	#	#	#	.	.	#
7	#	#	#	#	.	#	#	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	.	#	#
5	#	#	#	.	.	<	#	.	#	#
6	#	#	#	+	.	#	#	#	.	#
7	#	#	#	.	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	.	#	#	#
5	.	#	#	#	.	#	.	#	.	#
6	#	#	+	.	.	.	.	.	.	#
7	#	#	#	.	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	.
9	#	#	#	#	#	#	#	#	v	.
10	#	.	#	#	#	.	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	.	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	<	.	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	v	#
3	#	+	.	.	.	.	.	.	.	#
4	.	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	.	.
7	#	#	#	#	#	#	#	#	#	#
8	.	#	#	.	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	.	#	#	.
2	+	#	.	#	#	#	.	#	#	#
3	.	#	#	#	.	#	.	#	#	#
4	.	#	.	#	#	.	#	#	#	#
5	.	#	.	#	#	#	#	.	#	#
6	.	#	#	#	#	#	#	#	#	#
7	.	.	#	#	#	#	#	#	#	#
8	.	#	#	#	#	.	#	#	#	#
9	.	<	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	#	.	#	#	.	#
2	#	<	.	.	#	.	#	#	.	.
3	#	#	#	.	.	.	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	.	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	.	.	.	#	#
7	#	#	#	#	#	.	#	.	.	#
8	#	#	#	#	#	.	#	#	+	#
9	#	#	#	#	.	#	#	.	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	.	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	.	#	#	+	#	.	#	#	#	#
6	#	#	#	.	.	.	#	.	#	#
7	#	#	#	#	.	.	.	.	.	#
8	#	#	#	#	#	.	.	.	.	#
9	#	#	#	#	#	.	.	.	>	#
10	#	#	.	#	.	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	.
2	.	>	.	.	.	#	#	#	#	#
3	#	#	#	#	+	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	.	.	.	#
2	#	#	#	#	#	#	#	#	v	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	.	#	#	.	#	+	.	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	.	#	.	.	#
2	#	#	#	#	#	#	.	.	<	#
3	#	#	#	#	.	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	.	+	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	.	.	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	.	.	.	.	.	.	+
3	#	#	#	.	#	#	#	#	#	#
4	.	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	.	#	#	#
10	#	.	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	+	#	#	#	#	#	#	#
5	#	.	.	.	#	v	#	#	#	#
6	#	#	#	.	#	.	#	#	#	#
7	#	#	.	.	.	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		turnRight
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	.	#	.	.	.	.	#
7	#	.	#	.	.	.	#	+	#	#
8	#	.	.	.	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		turnRight
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	v	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	+	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	#	+	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	.	.	v	#
3	#	#	#	#	#	.	.	#	#	#
4	#	#	#	#	#	#	.	+	#	#
5	#	#	#	#	#	.	.	.	#	#
6	#	#	#	#	#	#	.	.	.	#
7	#	#	#	#	#	#	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	.	.	#	#	.	+	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	.	#	#	#	.	#	#
8	#	#	.	.	.	#	#	.	.	.
9	#	^	.	.	.	.	.	.	.	#
10	#	.	#	.	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	v	.	#	.	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	#	.	.	#	#	#	.	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	.	.	.	#	#	#	#	#	#
8	#	#	.	.	.	#	#	#	#	#
9	#	.	#	#	.	.	#	#	#	#
10	#	#	#	#	.	+	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	.
2	#	#	.	#	#	#	.	.	<	#
3	#	#	#	#	.	.	.	.	#	#
4	.	#	.	.	.	.	#	#	.	#
5	.	.	.	#	#	#	#	#	#	#
6	+	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	.	#	.	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	.	#	#	#	#	#	#	#	#
2	#	.	.	#	#	#	#	.	#	#
3	#	#	.	.	#	#	#	.	#	#
4	#	#	#	.	.	#	#	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	#	#	#	.	.	.	#	#
7	#	#	#	.	#	.	.	.	#	.
8	.	#	#	#	#	#	#	.	.	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	+	#	#	#	#
6	#	#	#	#	.	.	#	#	#	#
7	.	#	#	.	.	#	#	#	#	.
8	#	.	.	.	#	#	#	#	#	#
9	#	^	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	+	#	#
2	#	#	#	#	#	#	#	.	v	#
3	#	#	.	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	.	#	#
5	#	#	#	#	.	#	#	#	#	.
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	.	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	.	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	^	.	#	#	.	#	.	#	#
3	#	#	+	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	#	.	#
5	.	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	.
2	.	#	#	#	#	#	#	#	.	#
3	#	#	#	.	#	#	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	.	#
7	.	#	#	#	#	#	#	#	#	.
8	.	#	#	#	.	#	#	#	.	#
9	+	.	.	.	.	.	.	.	>	#
10	#	#	#	#	#	.	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	.	#	#	#	#	#	#	^	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	.	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	+	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	.
2	.	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	.	+	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	.	#	.	+	.	#	#	#	#
5	#	#	#	#	.	^	#	#	#	#
6	#	.	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	.	#	#	#
10	#	.	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	#	#	.	#	#	#	#	#	>	.
3	#	#	#	#	.	#	#	#	.	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	.	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	.	#	.	.	#	#	#
8	#	#	.	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	#	#	#	#
2	#	#	.	.	.	#	#	#	#	.
3	#	#	#	#	.	#	.	.	#	#
4	#	#	#	#	+	.	#	#	#	#
5	#	#	#	#	.	^	#	#	#	.
6	#	#	#	#	.	#	.	#	#	.
7	#	.	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	.	#	#	#
2	.	#	#	#	#	#	.	#	.	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	.	.
8	#	#	#	#	#	#	#	#	+	.
9	#	#	#	#	#	#	#	#	v	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	.	^	#	#	#	#	#	#	#	#
3	.	+	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	.	#	.	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	.	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	#	.	#
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	.
7	#	.	#	#	#	.	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	+	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	.	#	.	#	#	#	#	.
2	#	.	#	#	#	#	#	#	.	.
3	#	.	#	#	#	#	#	#	#	#
4	.	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	.	.	#	#	.	.
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	.	#	#	#	#	#	#
9	#	<	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	+	#	.	#	#	#	#	#	#
4	#	.	#	#	.	#	#	#	#	.
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	<	.	#	#	#	#	.	.	.
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	+	.	.	.	.	v	#
3	#	#	#	.	#	.	.	#	.	#
4	.	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	.	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	.	#	#	#	#	#	#	.	#	#
3	#	#	#	.	#	.	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	.	#	.	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	.
7	#	.	#	#	#	#	#	#	#	#
8	#	.	+	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	.	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	.	<	#	#	#	.	#	#	#	#
3	+	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	.	#	#
2	.	.	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	.	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	.	#
9	#	.	#	#	#	#	#	.	.	#
10	#	#	#	#	#	#	#	+	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	.	.	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	.	#	#	#
9	#	v	#	#	#	#	.	#	#	#
10	#	.	.	.	.	.	.	.	+	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	.	+	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	.	>	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	<	.	.	#	#	#	#	#	#
3	#	#	.	.	#	#	#	#	#	#
4	#	#	.	+	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	<	.
3	#	#	#	#	#	#	#	#	#	.
4	#	.	.	.	.	#	#	#	#	.
5	#	#	#	.	#	#	#	#	#	.
6	#	#	#	#	#	.	#	#	#	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	.	#	.
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	+

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	.	#	#	#	+	#	#
3	#	#	#	.	.	#	.	.	#	#
4	#	#	#	#	#	.	#	.	#	.
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	.	#	#	#	.	#	#
7	#	#	.	#	.	#	#	.	#	#
8	#	#	#	#	#	.	#	.	#	#
9	#	#	#	#	#	#	#	.	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	.	.	#	#	.
2	#	^	#	#	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	.	#	#	#	#	#	.	#	#
5	#	.	#	.	#	#	#	#	.	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	.	#	#	#	.	#	.
9	#	.	#	#	.	#	#	#	#	#
10	#	+	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	+	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	.	#	.	#	#	#	.	#
4	#	#	#	#	#	.	#	#	.	.
5	#	#	#	#	#	#	.	#	.	.
6	#	#	#	.	#	#	#	#	.	#
7	.	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	.	#	#	#	#	#	#	v	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	+	#	#	#	#	#
5	#	#	#	#	.	>	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	^	#	#	#	#	#	#	#	#
3	+	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	+	#	.	>	#
3	#	#	#	#	#	.	#	.	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
		}
		Else{
			moveForward
		}
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	.	+	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
		}
		Else{
			moveForward
		}
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	<	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	.	#	#	#	.	#	.	#
6	#	#	#	#	#	#	#	#	.	.
7	#	.	.	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	+	#
9	#	#	#	.	.	#	#	#	#	.
10	#	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	+	#
4	#	#	#	.	.	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	#	#	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	.
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	.	.	.	.	.	.	#	#
7	#	.	.	#	.	#	#	.	#	#
8	#	+	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
		If(pathLeft){
			moveForward
			moveForward
		}
		Else{
			moveForward
			turnLeft
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	.	#	+	#	#
5	#	#	.	.	.	.	.	.	#	#
6	#	.	.	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	.	<	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
		If(pathLeft){
			moveForward
			moveForward
		}
		Else{
			moveForward
			turnLeft
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	<	.	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	+	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	+	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	.	.	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	+	#	#	#	#	#	#	#	#
4	#	.	#	#	#	.	#	#	.	.
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	#
7	#	.	#	#	.	#	#	#	.	#
8	#	.	#	#	#	#	#	#	#	#
9	#	v	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnRight
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	.	#	#	#	#	.	#
2	#	^	#	#	#	.	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	.	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	+	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnRight
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	.	.	.	.	#
2	#	#	#	#	.	#	#	#	>	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	+	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		If(pathRight){
			moveForward
		}
		Else{
			moveForward
		}
		If(pathAhead){
			moveForward
			moveForward
			turnRight
		}
		Else{
			turnLeft
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	.	.	.	.	#	#	#
2	#	#	+	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	v	.	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		If(pathRight){
			moveForward
		}
		Else{
			moveForward
		}
		If(pathAhead){
			moveForward
			moveForward
			turnRight
		}
		Else{
			turnLeft
		}
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	.	.	.	.	.	.	.	#	#
9	#	<	#	#	#	#	#	+	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
			moveForward
		}
		Else{
			moveForward
			moveForward
			turnLeft
		}
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	#	#
8	#	#	#	#	#	#	#	.	.	#
9	.	.	#	#	#	#	#	#	>	#
10	#	#	+	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
			moveForward
		}
		Else{
			moveForward
			moveForward
			turnLeft
		}
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	+	#	#	#	#	#	#
5	#	.	#	.	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	.	.	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	#
2	.	.	.	.	.	.	.	.	<	#
3	.	#	#	.	#	#	#	#	#	#
4	+	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	+	#	>	#	#	#	#
6	.	#	#	.	#	.	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	#	#	.	#	#	#	#	.
9	#	#	#	#	#	.	#	#	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	^	.	.	#	#	#	#	#	#
3	#	#	#	.	.	.	#	#	#	#
4	#	+	.	.	.	#	#	#	#	#
5	#	#	#	.	#	#	.	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	.	.	#	#	#	#	.	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	.	#	#	#
3	#	#	#	#	#	.	#	#	.	#
4	#	#	#	.	.	.	#	#	#	#
5	#	#	#	.	#	^	#	#	#	#
6	#	#	#	.	+	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	.	#	#	#	#	#	#
10	#	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	.	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	.	#	#	#	#	.	.	.
8	#	#	.	.	#	#	#	+	#	.
9	#	#	#	#	#	.	#	.	>	.
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	.	#	#
2	#	<	+	.	.	#	#	#	#	#
3	#	.	.	#	#	#	#	.	.	#
4	.	#	#	#	#	#	#	.	#	.
5	#	#	#	#	#	.	#	#	.	#
6	#	#	#	.	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	.
8	.	#	#	#	#	#	#	#	+	.
9	#	#	#	#	#	#	.	#	v	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	.	.	.
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	+	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	.	.	#	#	#	#	#	#
6	#	.	#	+	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	>	.	.	.	.	.	.	+	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	+	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	.	#	#	.	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	.	.	#	#	#	#	#	#
9	#	>	#	.	#	#	#	#	#	#
10	#	#	+	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	.	.	.
8	#	#	#	#	#	#	#	.	#	+
9	#	#	#	#	#	#	#	.	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	.
2	#	v	#	#	#	#	#	#	#	#
3	.	.	#	#	#	#	#	#	.	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	.	.	.	.	.	.	+	#
6	#	#	#	#	#	#	#	#	#	#
7	.	.	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	.	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	+	#	#	#	#	#
3	#	#	#	#	.	#	#	.	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	.	#
8	#	#	#	#	.	#	#	#	#	#
9	#	>	.	.	.	.	#	#	.	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	.	#
2	#	#	#	#	#	#	#	.	.	.
3	#	#	#	#	#	#	#	.	.	.
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	#	+	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnRight
			moveForward
			turnLeft
			moveForward
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	#	#
5	#	#	.	.	.	>	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	.	.	#	#	#	#	#	#	#
10	#	.	.	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnRight
			moveForward
			turnLeft
			moveForward
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	.	.	.	.	#	#	#
6	#	#	.	#	#	#	+	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	.	.	.	.	.	^	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			moveForward
		}
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	<	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	.	+	#	#	.	#
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	#	.	#	#	#	.	.
7	#	#	#	#	.	#	#	#	.	#
8	#	#	#	#	.	.	.	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			moveForward
		}
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	.	#	#	.	.	#	#	#
5	#	.	#	#	.	<	+	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	.	.	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	.	+	#
9	.	#	#	#	#	#	#	.	v	#
10	#	#	#	#	.	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	.	<	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	.	+	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	.	#
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	#	#	+	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	+	.	#
9	#	#	#	#	#	#	#	#	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	+	#	#	#	#	#	#	#
2	#	^	.	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	+	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	.	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	.	#	#	#	#	#	.	#
6	.	#	#	#	.	#	#	#	.	#
7	.	#	#	#	#	#	#	#	.	#
8	#	#	#	#	.	#	#	#	.	#
9	.	#	#	#	#	#	#	#	^	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	.	#	#	.	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	#	#	.	#	#	#	#
9	#	>	.	.	.	.	.	+	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	#	#	#	#
6	#	#	#	#	.	.	+	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathRight){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	+	.	.	.	v	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathRight){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	#	#	#	#	#	.	#
3	#	.	+	#	#	.	#	#	#	#
4	.	#	#	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	.	.	#
8	#	#	#	#	#	.	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	.	.	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	+	.	#	#	#	.	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	.	+

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	+	.	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	#	#	#	#	#	#	#	#	#
2	.	^	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	+
9	#	#	#	#	#	#	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	.
5	#	#	.	.	.	#	.	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	#	#	.	.	#	#	#	#	#	#
9	+	.	.	.	.	.	.	.	v	#
10	#	#	#	#	.	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	.	#	#
5	#	.	#	#	.	.	#	#	#	#
6	.	#	#	#	.	.	#	#	#	#
7	.	#	#	#	.	.	#	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	^	.	.	.	.	.	+	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	.	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	+	.	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	.	#	#	#	.	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	+	#	#	#
2	#	#	#	#	#	#	.	.	<	.
3	#	#	#	#	.	#	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	.	#	.	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	.	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	.	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	.	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	>	.	#	#	#
6	#	.	#	#	#	#	+	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	+	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	+	#	#	#	#	#
2	#	<	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	.	#	#	.
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	+	#	#	#	#	#	#	#	#	#
9	.	>	.	#	#	#	#	#	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	.	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	.	.	#	#	#	.	#	.	.
9	.	.	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	.	#	.	.
4	#	#	#	.	#	#	#	#	.	#
5	#	.	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	.
8	.	.	+	.	#	#	.	#	#	.
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	.	.	#	#	#	#
8	#	#	#	.	.	.	#	#	#	#
9	#	#	#	+	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	.	<	#
3	#	#	#	#	#	.	.	#	#	#
4	#	#	#	#	.	.	.	#	#	#
5	#	#	#	#	.	+	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	.	.	.	#
2	#	#	#	.	.	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	.	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	+	.	.	.	.	>	#
10	.	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	.	^	#	#	#	#	#	#	#	.
3	#	.	#	#	#	#	#	.	#	#
4	.	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	.	#	#	#
6	#	.	#	#	.	#	#	#	.	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	.	+	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	.	.	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	.	.	#	#	#
9	#	v	.	.	.	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
			turnRight
		}
		Else{
			turnLeft
		}
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	.	#	#	#
2	#	v	.	.	.	.	.	.	.	+
3	#	#	#	#	#	#	#	#	#	#
4	#	.	.	.	#	#	#	#	#	#
5	.	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	.	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
			turnRight
		}
		Else{
			turnLeft
		}
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	<	.
3	#	#	.	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	#	.	.
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	.
7	#	#	#	.	#	#	#	#	.	#
8	.	#	#	#	#	#	#	#	.	#
9	.	#	#	#	#	.	#	#	.	.
10	.	#	#	#	#	.	#	#	+	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	.	.	#	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	>	#	#	#	#	#	#	#	#
10	#	#	#	.	.	.	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	+	#	#	#	#	#	#	#	#
3	#	.	#	.	#	#	#	.	#	.
4	#	.	#	#	#	.	#	.	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	.
7	#	.	#	#	.	#	#	#	#	#
8	#	.	.	#	#	#	#	.	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	v	.	.	.	.	.	.	+	#
3	#	.	#	#	#	#	.	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	.	.	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	+
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	v	#	#	#	.
6	#	#	#	#	#	.	.	.	.	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		If(pathLeft){
			moveForward
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	+	#	#	#	#
7	#	#	#	#	.	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	v	#	#	#	.	#	#	#	#
10	#	.	.	.	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		If(pathLeft){
			moveForward
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	#	#	#	#	#	#	#
3	#	#	+	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	+	#	#	#	#	#	#	#
9	#	>	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	.	#	.	#	#	#	#	#
6	#	#	.	.	.	.	#	#	#	.
7	#	#	.	.	#	#	#	#	#	.
8	#	#	.	.	.	.	.	.	.	.
9	#	>	.	.	.	.	.	.	.	+
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	.	.	#	#
2	#	+	.	.	.	.	.	.	<	#
3	#	#	.	#	.	.	.	.	#	#
4	#	#	#	#	.	.	.	.	#	#
5	#	#	#	#	#	#	.	.	#	#
6	.	#	#	#	#	#	.	.	#	.
7	#	#	#	.	#	#	.	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	.	#
2	#	.	#	#	#	#	#	#	<	#
3	.	#	#	#	#	.	#	#	.	#
4	#	#	#	#	#	#	.	#	.	#
5	#	.	#	#	#	#	.	#	.	.
6	#	#	#	#	#	#	.	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	.	.	+	#
9	#	#	#	.	#	#	#	#	#	#
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	.
2	#	v	.	.	.	.	.	+	#	#
3	#	#	.	#	#	#	#	#	#	.
4	#	#	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	.	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	.	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	.	#	#	#	#	.
2	#	.	.	.	#	.	#	.	#	#
3	.	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	.	#	#
6	#	.	#	#	#	#	#	.	.	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	v	#	#	#	#	#	#	#	#
3	#	.	#	.	#	.	#	#	#	#
4	#	.	#	#	#	#	#	.	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	.	#	.	#	#	#	#	.
7	#	.	#	#	#	#	#	#	#	#
8	#	+	#	.	#	.	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	.	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	.	.	#
2	#	#	#	#	.	#	.	.	<	#
3	#	#	+	#	.	.	#	.	.	#
4	#	#	.	.	.	#	.	.	.	#
5	#	#	.	#	.	.	.	.	.	.
6	#	#	#	.	#	#	.	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			turnRight
		}
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	.	#	#	#	#	#	#
3	#	.	#	.	.	.	#	#	#	.
4	#	#	#	.	#	.	.	.	#	.
5	#	#	#	#	#	.	#	.	.	.
6	#	#	#	#	#	#	#	.	.	.
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	+	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			turnRight
		}
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	.	+	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	.	.	.	>	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			turnRight
			moveForward
			moveForward
			moveForward
		}
		Else{
			turnRight
		}
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	<	.	.	.	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	+	.	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			turnRight
			moveForward
			moveForward
			moveForward
		}
		Else{
			turnRight
		}
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	.	+	#	#	#	#	#	#	#
9	#	^	#	#	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	#	#	#	#	.	#	#	#	#
2	.	<	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	.	#	#	#	#	#	.	.
6	#	#	#	.	#	#	#	#	.	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	.	#	#	#	#	#	#	.	>	#
3	#	#	#	.	#	#	.	.	.	#
4	#	#	#	#	.	.	.	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	.	.	.	.	#	.	#	#	#
7	#	.	.	.	#	#	#	#	#	.
8	#	.	.	#	#	#	#	#	.	#
9	#	+	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	.	#	#
4	#	#	#	+	.	#	#	.	#	#
5	#	#	#	#	.	.	#	.	#	#
6	#	#	#	#	#	.	.	.	#	#
7	#	#	.	#	#	.	.	.	#	#
8	#	#	#	#	#	#	#	.	.	#
9	.	#	#	#	#	#	#	.	v	.
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	.	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	.
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	+	#	#	.	#	#	#	#	#	#
9	.	v	#	#	#	#	#	#	.	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	.	#	#	#
5	.	#	#	#	#	>	#	#	#	.
6	#	#	#	#	+	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	.	#	#	.	#
10	#	#	#	.	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	.	#	.	#	#
2	#	#	#	#	#	#	#	.	#	#
3	.	#	#	.	#	+	.	.	.	#
4	#	#	#	#	#	#	#	.	#	#
5	.	.	.	.	.	v	.	.	.	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	.	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	.	#
7	#	.	#	#	#	.	.	.	.	#
8	#	#	#	#	#	#	.	#	.	#
9	#	#	.	#	#	#	+	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	.	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	.	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	.	#
3	#	.	#	#	.	#	#	.	#	#
4	#	.	#	#	#	#	.	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	.
7	#	.	#	#	#	#	#	#	#	#
8	.	.	#	#	#	#	#	#	#	#
9	#	.	#	.	#	#	#	#	#	#
10	#	+	#	.	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	.	.	#
5	.	#	#	.	.	#	#	#	#	.
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	+	.	.	.	.	.	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	<	#
3	#	.	#	#	.	#	#	.	.	#
4	#	#	.	#	#	#	#	.	#	#
5	#	#	#	#	#	#	.	.	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	.	.	#	#	.
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	+	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	.	#	+	#	#	#	#	#
3	#	#	.	#	.	#	#	#	#	#
4	#	#	.	.	.	#	#	#	#	#
5	#	#	.	.	#	#	#	.	.	.
6	#	.	.	.	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	.	.	.	.	#	.	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	.	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	.	#	#
7	.	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	.	.	#	#	#	#	#	.	#	#
10	#	+	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	.	#	#	#	.	#	#	#	#	#
4	#	#	#	#	#	#	.	#	.	#
5	#	#	.	#	#	.	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	^	.	.	.	.	.	+	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	#	#	#	.	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	+	.	#	#	#	#	#
4	#	#	#	.	.	#	#	#	#	#
5	#	#	#	#	.	<	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	+	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	+	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	.	#	#	#
2	#	.	#	#	#	.	#	#	#	#
3	#	.	#	.	#	.	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	.	#	#	#	#	.	#	#	#
6	#	.	#	.	#	.	#	#	#	#
7	#	.	#	#	#	#	.	#	#	#
8	#	.	#	#	.	#	#	#	.	#
9	.	<	#	#	.	#	#	#	#	#
10	#	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	.	#	#
2	+	.	.	.	.	.	.	.	v	.
3	#	.	#	.	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	+	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	.	.	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	.	.	#	#
4	#	#	#	#	#	.	#	.	#	#
5	#	#	#	#	#	>	#	+	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	v	#
3	#	#	#	#	#	.	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	.	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	.	#	#	.	.	.	.	.	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	+	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	.
2	#	>	.	.	.	.	.	.	.	+
3	.	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	.
9	#	#	#	#	.	#	#	#	#	#
10	#	#	.	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	.	#	#	#
3	#	.	#	#	.	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	.	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	.	.	.	.	#	#	#	#	#	.
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	v	#
3	#	#	#	#	#	#	#	#	.	#
4	.	#	#	#	#	#	#	.	.	#
5	#	#	#	.	#	#	#	.	.	#
6	#	#	#	#	.	#	#	#	.	#
7	#	.	#	#	#	#	#	.	.	#
8	#	#	#	#	#	#	#	.	+	#
9	#	#	#	#	#	#	.	#	.	#
10	.	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	.	#	#	#	.	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	>	.	.	#	#	.	#	#	#
10	#	#	.	+	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	#	#	.
2	#	#	#	#	#	#	.	.	<	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	.	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	.	#
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	#	#	+	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	<	#	+	#	#	#	#	#	#
3	#	.	#	.	#	#	#	#	#	#
4	#	.	.	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	.	.	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	<	#	#	.	#
6	#	.	#	#	#	.	#	#	#	#
7	#	.	.	.	.	.	#	#	#	.
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	+	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	.	.	.	.	^	#
3	#	.	#	#	+	#	#	#	#	.
4	#	#	#	.	#	#	.	#	#	#
5	#	#	#	.	#	#	#	#	.	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	.	#	#	#	.	#	#	#	#	#
10	#	.	.	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	.	.	+	.	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	v	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	#	#	#	.	#	>	.	#	#	#
6	#	#	#	.	#	#	.	#	#	#
7	#	#	#	.	.	.	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	.	#	#	#
2	#	<	+	#	#	.	#	#	#	#
3	.	.	.	#	#	#	.	.	#	.
4	.	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	.	#
2	#	#	#	#	#	#	#	+	>	#
3	#	#	#	#	#	#	#	#	#	.
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	#	.	#	#
6	#	#	#	#	#	.	#	.	#	#
7	#	#	#	#	#	.	#	.	#	#
8	#	.	#	#	#	.	.	.	.	.
9	#	#	+	.	.	.	.	.	>	#
10	.	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	.	.	#	#	#	#	#	#	#
3	#	+	#	#	#	#	#	#	#	#
4	#	.	#	.	#	#	#	#	#	#
5	#	.	.	.	.	.	#	#	#	#
6	#	.	#	#	#	#	#	#	#	.
7	#	.	#	#	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	v	.	#	#	#	.	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	<	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	+	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	v	.	.	#	#	#	#	#	#
10	#	#	#	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	.	#	#	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	+	.	.	.	.	.	.	.	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	.	#
2	#	#	#	#	#	#	#	#	>	#
3	.	#	#	#	#	.	#	#	.	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	.
7	#	#	#	#	#	#	#	#	.	#
8	#	.	#	#	#	#	#	#	.	#
9	#	#	#	#	#	.	#	#	.	.
10	#	#	#	#	#	#	#	#	+	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	.	.	#
2	#	v	#	.	#	#	#	#	.	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	#	#	.	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	.	#	#
9	#	.	.	#	.	#	#	#	#	#
10	.	+	#	#	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			moveForward
			turnRight
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	+	.	.	.	.	.	.	.	<	#
3	#	.	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	.	#	#	#	#	.	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			moveForward
			turnRight
			turnLeft
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	.	#	#
3	#	#	.	#	#	.	#	.	.	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	.	#	#	#	#	.	.	.	+	#
8	#	#	.	#	#	#	.	.	#	#
9	.	.	#	#	#	#	.	.	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	.	#	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	.	#
7	.	.	.	.	#	#	#	#	#	#
8	#	.	#	.	#	#	#	.	#	#
9	#	<	#	+	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	v	.	.	#	#	#	#	#	.
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	.	.	#	#	#	#	#	.	.	#
9	#	.	#	#	#	#	#	#	#	#
10	#	+	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	+	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	.	#	#	#	#	#	#	.	#
6	#	.	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	.
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	.	#	#	#	^	.
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	.	.	.	#	#
7	#	#	#	+	.	.	.	.	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	+	.	#	#	#	.	#
3	#	#	#	.	.	.	#	#	#	.
4	#	#	#	.	.	#	.	#	#	#
5	#	#	.	.	.	#	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	.	.	#	#	#	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	^	.	.	.	#	#	#	#	#
10	.	#	#	.	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	.	#	#	#	.	#	#	#	#
3	#	#	.	#	#	#	#	.	#	.
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	^	.	.	.	.	.	.	.	+
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	.
4	#	.	#	#	.	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	.	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	.	#	#	#	#	#	.	#	#
9	#	+	#	#	#	#	.	.	#	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	.	.	.	.	.	.	.	#	#
2	#	.	#	#	#	#	.	.	<	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	#	.	#	#	#
2	#	v	#	#	#	.	#	#	#	.
3	#	.	#	#	#	#	#	#	#	#
4	.	.	#	#	.	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	.
6	.	#	#	#	#	#	#	#	#	#
7	.	#	.	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	+	#	#	.	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	.	#
8	#	#	#	#	#	#	+	#	.	#
9	#	#	#	#	#	#	#	#	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	#	.	#	+	#	#	#	#	#	#
4	#	.	.	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	#	.	.	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	+	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	.	+	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	.	.	>	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	<	.	.	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	+	.	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	.	.	.	.	.	.	.	.
2	#	#	#	#	#	#	#	#	>	.
3	#	.	#	#	.	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	.	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	.
8	#	#	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	+	#
2	#	v	.	.	.	.	.	.	.	#
3	#	#	#	#	#	#	#	.	.	#
4	#	#	.	#	.	.	#	.	#	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	.
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	.	#	+	.	#
2	.	.	#	#	#	#	#	#	^	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	.	.	#	#	#	#	.	#
5	#	#	#	#	#	#	.	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	.	+
9	#	#	#	#	#	#	#	#	>	.
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	+	#	#	#	#	v	#
3	#	#	.	.	.	.	.	.	.	#
4	#	#	#	#	#	.	.	.	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	.	#	#
6	#	#	#	#	+	#	.	#	#	#
7	#	#	#	.	.	.	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	.	#
9	+	.	.	.	.	.	.	.	<	.
10	#	.	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	+	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	.	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	.	.
6	#	#	#	#	#	#	#	.	#	+
7	#	#	#	#	#	#	#	.	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	.	.	#	#	#	#
9	#	>	.	.	#	.	#	#	#	#
10	#	#	#	#	+	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	.	.	#	.	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	+	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	.	#
2	.	#	#	#	#	#	#	.	v	.
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	#	#	#	#	#	.	.
5	#	#	#	#	#	#	#	#	.	.
6	#	#	#	#	#	#	.	#	#	.
7	.	#	#	.	#	#	#	#	#	.
8	#	.	.	.	#	.	#	#	#	+
9	#	#	#	#	#	#	.	#	#	.
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	.	.	.	^	#
3	#	#	#	#	.	.	#	#	#	#
4	#	.	.	.	.	.	#	#	#	#
5	#	#	.	#	.	#	#	#	#	#
6	#	#	.	.	.	#	#	#	#	#
7	#	#	.	#	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	+	.	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
			turnLeft
		}
		Else{
			turnRight
		}
		turnLeft
		If(pathAhead){
			turnLeft
			moveForward
		}
		Else{
			turnRight
			moveForward
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	.	.	.	^	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	.	.	#	#	#	#	#
8	#	#	.	#	.	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	+	.	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
			turnLeft
		}
		Else{
			turnRight
		}
		turnLeft
		If(pathAhead){
			turnLeft
			moveForward
		}
		Else{
			turnRight
			moveForward
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	.	.	#	#	.	#
6	#	.	#	#	#	#	#	#	+	#
7	.	#	#	#	#	#	#	.	.	#
8	#	#	#	#	.	#	#	.	.	#
9	#	#	#	#	#	#	.	.	<	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	.
5	#	#	.	#	#	>	.	.	#	.
6	#	#	#	#	#	#	.	.	#	#
7	#	.	#	#	#	#	+	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	+	.	#
2	#	#	#	#	#	#	.	#	v	.
3	#	#	#	#	#	#	.	.	.	#
4	#	#	#	#	#	.	#	#	.	#
5	#	#	#	.	#	#	#	#	.	.
6	#	#	#	#	#	#	#	#	.	#
7	#	.	#	#	#	#	.	#	#	#
8	#	#	#	.	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	.	#	#	#	#	#	#
2	#	^	#	.	#	#	#	#	#	#
3	#	#	+	.	#	#	#	#	#	.
4	#	#	.	#	#	.	#	#	#	#
5	.	#	#	#	#	#	#	#	.	#
6	.	#	#	.	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	+	#	#	#	#	#	#	#
9	#	<	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	.	+

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	.	+	.	#
2	#	#	.	#	#	#	#	.	v	#
3	#	#	#	#	.	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	.	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	.	#	.	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	+
9	#	#	#	#	#	#	#	#	<	#
10	#	#	.	#	.	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	.
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	.	.	+	#	.
4	.	#	#	#	#	.	.	#	#	#
5	#	#	#	#	.	.	#	.	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	.	.	#	#	#	#	#	.
8	#	.	.	#	#	#	#	#	#	#
9	#	^	#	.	#	#	#	#	#	#
10	.	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	.	#	#	.
4	#	#	#	#	#	#	.	#	#	#
5	.	#	#	#	#	>	.	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	#	#	#	#	.	.	#
8	#	#	#	#	.	#	#	.	.	.
9	#	#	#	#	#	#	#	.	.	+
10	#	#	.	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	.	#	#	#
2	#	<	.	#	#	.	.	#	#	#
3	.	.	.	.	.	#	.	#	#	#
4	#	#	#	#	.	.	.	.	#	#
5	#	#	#	#	#	#	.	.	+	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	.	#	#	#	#	#	.	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	.	#
5	#	.	#	.	#	#	#	#	.	#
6	#	+	.	.	.	.	.	.	#	#
7	#	.	#	.	.	.	#	#	#	#
8	.	.	#	#	#	.	.	.	#	#
9	#	.	#	#	#	#	#	.	>	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	+
6	#	#	#	#	#	#	#	#	.	.
7	#	#	#	#	#	#	#	#	#	.
8	#	.	#	#	#	#	#	#	#	.
9	#	>	.	.	.	.	.	.	.	.
10	#	.	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	.	.	.	#	#	#	#
2	#	.	#	#	#	.	#	#	#	#
3	#	.	#	#	#	.	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	+	#	#	#	<	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	.	.	#	#	#	#	#
5	#	#	.	#	.	^	#	#	#	#
6	#	#	.	+	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	.	.
7	#	#	#	#	#	#	#	+	#	.
8	#	#	#	#	#	#	#	#	.	.
9	#	#	#	#	#	#	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	.	.	#	.	#	#	#	#	#	#
8	#	#	#	.	.	.	.	.	.	+
9	#	>	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	.	#	.	.	<	#
3	+	.	.	.	.	.	.	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	.	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	.	#	#	#	#	#	#	.
4	.	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	.
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	^	.	.	.	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	.	#	#	#	.	.	+	#
4	.	#	.	#	.	.	#	#	.	#
5	#	#	#	#	#	#	.	#	.	#
6	#	.	#	#	#	#	#	#	.	#
7	.	#	.	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	.	#	#	.	#	#	#	<	#
10	#	#	#	.	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	.	#	.	.	+	#	#	#	#
5	#	#	#	#	.	v	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	.
9	#	#	#	#	.	#	#	#	.	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	.	#	#	#	#	+	>	#
10	#	#	#	#	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	+	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	.	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	+	#	#	#	#	#	.	#
9	#	<	.	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	+	.	#
2	#	#	#	#	#	#	#	.	v	#
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	.	#	#	#	#	#	#	.	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	.
3	#	.	#	#	#	.	#	#	.	#
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	.	.	.
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	+	.	#
8	#	#	.	.	#	#	.	.	.	#
9	#	#	#	#	#	#	#	.	^	#
10	#	#	.	#	.	.	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	+	#	#	#	#	#	#
2	.	>	.	.	.	.	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	.	.	#
4	.	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	<	.	.	.	.	.	.	+	#
10	#	#	.	.	#	.	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			turnRight
		}
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	.	#	#	#	#	#	.	#
3	#	#	.	#	#	#	#	#	+	.
4	#	#	#	#	#	#	#	#	.	.
5	#	#	#	#	#	.	#	.	.	.
6	#	#	#	#	#	.	#	#	.	.
7	#	#	#	#	#	.	#	#	.	.
8	#	#	#	#	#	#	#	#	.	.
9	.	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		If(pathRight){
			turnRight
		}
		Else{
			turnRight
		}
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	.	#	.	#	#
2	#	#	#	#	#	#	#	+	>	#
3	#	#	#	#	#	#	#	.	.	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	.	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	.	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	^	.
10	#	#	#	#	#	#	#	#	+	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	+	.	#	v	#
10	#	#	#	#	#	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	^	#	.	+	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	+	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	.	.	#	#	#
5	#	#	#	.	#	^	.	#	#	#
6	#	#	#	.	.	#	.	.	#	#
7	#	#	#	#	.	.	.	.	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
		moveForward
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	.
3	#	#	#	#	#	#	#	.	.	.
4	#	#	#	+	.	.	.	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
		moveForward
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	v	.
3	#	#	#	#	#	#	#	+	#	.
4	#	#	#	#	#	#	#	.	.	.
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	.	.	#	#	#
4	#	#	#	#	.	#	+	#	#	#
5	#	#	#	#	.	^	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	#	.	#	.	#	#	#	#
9	#	>	.	.	#	+	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	+	#	.	.	<	#
3	#	#	#	#	.	#	.	#	#	#
4	#	#	#	#	.	.	.	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	<	+	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	+	>	#	#	#	.
6	#	#	#	#	.	.	#	#	.	#
7	#	#	#	#	#	#	#	.	#	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	.	.	#	#	#	#	#	#
10	#	.	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	.	#	#	#
2	#	#	#	#	#	#	#	.	^	.
3	#	#	#	#	#	#	#	#	.	+
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	.	#	#	#	#	.	#	#
7	#	.	#	#	#	#	#	#	#	#
8	.	#	#	.	#	#	#	#	#	#
9	.	.	#	#	.	#	#	#	.	#
10	#	#	#	#	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	.	#	#	.
2	#	#	#	#	#	.	#	.	#	#
3	#	#	#	#	.	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	+	#	#
9	#	#	.	#	#	#	#	.	v	#
10	#	#	#	#	#	.	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	.	.	.	.	#	#	#	#
5	#	.	#	#	#	>	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	.	.	+	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	+	.	.	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	<	#	#	#	.	#	#	#	#
10	#	.	.	.	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	+	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	#	+	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	.
4	#	#	.	#	#	#	#	#	.	#
5	.	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	+	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	.
2	.	.	#	.	#	#	#	#	v	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	+
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	.	.	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	.	#	#	#	#	.
7	.	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	.	.	#	#	#	#	#	^	.
10	#	#	#	.	#	.	#	#	#	+

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	.	+
2	.	.	#	#	#	#	#	#	<	#
3	#	#	.	#	#	#	#	#	.	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	.	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	.	#	#	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	.	#	#
3	#	#	#	#	#	#	.	#	#	#
4	.	#	#	#	#	.	.	+	#	#
5	.	#	#	#	#	v	.	.	#	#
6	#	#	#	#	#	.	.	.	#	#
7	#	#	.	#	#	.	.	.	#	#
8	#	.	#	#	#	#	.	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	.
6	.	.	#	#	#	#	#	.	#	#
7	+	.	.	#	.	.	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	>	.	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	.	#	#	.	#
2	#	<	.	.	#	.	#	#	#	.
3	#	.	.	.	#	.	#	.	#	#
4	#	#	#	.	.	.	#	#	#	#
5	#	#	.	.	#	.	.	.	#	#
6	#	#	.	.	#	.	#	.	.	.
7	#	#	#	.	#	.	#	#	#	+
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	.	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	.	+	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	.	.	.	#	#	#	.	#
6	#	#	.	.	#	#	.	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	.
9	#	v	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	v	.	.	.	.	.	.	.	+
10	.	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	.	#	#	#
2	#	<	#	#	#	.	#	.	#	#
3	.	.	#	.	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	+	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	+	.	#	#	#
9	#	.	#	#	#	.	.	.	v	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	>	.	.	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	+	.	#	#	.	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	.
7	.	.	#	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	.	.
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	.	.	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	.	#	#	#	#	#	#	#	.
9	#	.	.	#	#	.	#	#	<	#
10	+	.	.	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	v	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	.	.
5	#	#	.	#	#	#	#	.	#	.
6	#	#	.	#	.	#	#	#	#	.
7	.	#	.	#	#	#	#	#	#	.
8	#	#	#	.	#	#	#	#	.	.
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	.	#	#	#	#	#	+

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	RepeatUntil(goal){
		If(pathRight){
			moveForward
			moveForward
		}
		Else{
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	#	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	.	.	.	#	#
8	#	#	#	#	#	#	#	.	.	#
9	#	#	#	#	#	#	#	.	+	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnLeft
		}
		If(pathLeft){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	+	.	#	#	#	#	#	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	#	.	.	.	#	#	#	#	#	#
8	#	#	.	.	#	#	#	#	#	#
9	#	v	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			turnLeft
		}
		If(pathLeft){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	.	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	#	.	#
8	#	.	.	#	#	#	.	#	#	.
9	.	>	.	#	#	#	#	#	#	.
10	#	#	+	#	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	.	#	#	#
2	#	#	#	.	#	#	.	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	.	#
7	#	.	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	.	#	+	>	#
3	#	.	#	#	#	#	#	.	.	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	.	#
9	#	^	.	#	#	#	#	#	#	#
10	#	+	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	.	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	+	.	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	.	.	.	#	#	#	#	#
7	#	.	#	#	.	#	#	#	#	#
8	#	.	#	#	.	#	#	#	#	#
9	#	^	#	#	+	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	.	.	.	v	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	.	+	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
			turnLeft
			turnLeft
		}
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	>	#	#	#	#
6	#	#	#	#	#	.	#	#	+	#
7	#	#	#	#	#	.	#	#	.	#
8	#	#	#	#	#	.	.	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		If(pathLeft){
			turnRight
		}
		Else{
			moveForward
			turnLeft
			turnLeft
		}
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	+	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	<	.	.	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	^	#	+	#	#	#	#	#	#
3	#	.	#	.	#	#	#	#	#	#
4	#	.	.	.	.	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathRight){
			moveForward
		}
		Else{
			turnLeft
			moveForward
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	.	.	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	.	#	#
9	#	#	+	.	.	.	.	.	v	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	.
8	#	#	#	#	.	#	#	#	#	#
9	#	^	.	.	.	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	.	<	#	#	#	#	#	#	#	#
3	.	.	+	#	#	#	.	#	#	#
4	.	.	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	.	#	#	.	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	.	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	.
3	#	#	#	.	#	.	#	.	#	#
4	.	#	#	.	.	.	#	#	#	#
5	#	#	#	.	#	^	.	#	#	#
6	#	#	#	.	+	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	.	.	.	.	+	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	.	.	.	.	.	v	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			moveForward
			moveForward
			turnRight
		}
		Else{
			moveForward
			turnRight
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	#	#	#	+	#	.	#
4	#	#	#	#	#	#	.	#	.	#
5	#	#	#	#	#	.	.	#	.	.
6	#	#	#	#	#	#	.	#	.	#
7	#	#	#	#	#	#	.	.	.	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathLeft){
			moveForward
			moveForward
			turnRight
		}
		Else{
			moveForward
			turnRight
			moveForward
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	+	.	#	#	#	#
5	#	#	.	#	#	^	#	#	#	#
6	#	#	#	#	#	#	.	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	.	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	.	#	#
3	#	#	#	#	.	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	v	#	#	#	#	#	#	#	#
10	#	.	+	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	>	.	.	.	.	.	.	+	#
10	#	#	#	.	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	#	v	#
3	.	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	.	#	#	#	.	#
7	#	.	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	.
9	#	#	#	#	#	.	.	.	+	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	.	.	#	#	#
2	#	v	.	.	.	.	.	.	.	+
3	#	.	#	#	#	.	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	.	#	#	#	.	#	#	.	.
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	#	.	#	.	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	.	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	.	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	.	#	#	#	#
4	.	.	.	#	#	#	#	#	#	#
5	.	#	#	.	#	.	.	.	#	#
6	.	#	#	.	#	#	#	.	#	#
7	.	#	.	.	#	#	.	.	#	.
8	.	#	.	.	#	#	#	.	#	#
9	+	.	.	.	.	.	.	.	^	#
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	>	#
3	#	#	#	#	#	#	#	+	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	.	+

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	.	#	+
9	#	#	#	#	#	#	#	#	<	.
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	.	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	.	+	#	#	.
7	#	#	#	#	#	#	#	#	#	.
8	.	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	+	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	+	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	+	#	#
2	.	#	#	#	#	#	#	.	v	#
3	#	#	#	#	#	#	#	#	.	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	.	#
3	#	#	#	#	#	.	#	#	#	#
4	.	.	#	#	#	#	#	#	#	.
5	#	#	.	#	#	#	.	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	.	+	#	#	#	#	#	#	#
9	#	<	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	.	.	.	#	#	#	#	#
7	#	.	#	#	.	#	#	#	#	#
8	#	.	#	#	+	#	#	#	#	#
9	#	<	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	+	#	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	#	.
5	.	#	.	.	.	v	.	.	#	#
6	#	#	#	#	#	#	.	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	+	#	#	#	#	#
5	#	#	#	.	#	>	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	^	.
3	#	#	#	#	#	#	#	+	#	.
4	#	#	#	#	#	#	#	.	.	.
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	#	#	#	.	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	.	#	#	.	.
7	#	#	#	#	.	#	#	#	#	#
8	#	.	+	#	#	#	#	#	#	#
9	#	v	.	#	.	#	#	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	.	#	#	#	.	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	.	#	#	.	#	#	#	+	#	#
9	#	.	#	#	.	.	#	.	>	#
10	#	.	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	.	.	.	#	#	#
2	#	#	.	#	#	#	+	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	.	.	<	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		turnRight
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	.	.	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	+	#	#	#	.	#	#	#	#	#
6	.	.	.	.	.	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		turnRight
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	>	#	.	.	#
6	#	#	#	#	#	#	#	.	+	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	.	.	.	#	#	#	#	#	#	#
5	+	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	#	.	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	.	#	#	#	.	#	#	.	#
8	#	#	#	#	#	.	#	#	.	#
9	#	v	.	.	.	.	.	.	.	+
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	.
2	#	#	#	#	.	#	#	#	<	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	.
7	#	#	#	#	#	#	#	#	+	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	.	.	.	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	.	.	.	.	.	.	.
4	#	#	#	#	.	#	#	#	#	.
5	#	#	#	#	.	^	#	#	#	.
6	#	#	#	#	.	#	#	#	#	+
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		If(pathLeft){
			turnRight
			moveForward
			turnLeft
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	.	.	.	.	.	#
5	#	#	#	#	#	>	#	#	.	#
6	#	#	#	#	#	#	#	+	.	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
		If(pathLeft){
			turnRight
			moveForward
			turnLeft
		}
		Else{
			turnLeft
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	.
2	.	#	#	#	#	#	#	#	^	.
3	#	#	#	#	#	#	#	#	.	+
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	#	.	#	#	.
6	#	#	#	.	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	#	+	#	#	#
5	#	.	#	#	#	<	.	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	.	#	#	#
10	#	#	#	#	#	#	#	.	#	.

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	#	.	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	.	+	.	#	#
7	#	#	#	#	.	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	+	#	#	#	#	.	#	#
9	#	<	.	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	.	.	.	.	#	#	#	#	#
8	.	#	#	#	.	#	#	#	#	#
9	.	>	#	#	.	#	#	#	#	#
10	#	#	+	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
			moveForward
		}
		Else{
			moveForward
			moveForward
		}
		turnRight
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	<	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	+
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		If(pathLeft){
			turnLeft
			moveForward
		}
		Else{
			moveForward
			moveForward
		}
		turnRight
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	.	.
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	.	#	#	#	#	.	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	#	#	.	#
2	.	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	.	#	.	#	#	#
7	#	.	.	.	.	.	.	.	.	+
8	#	.	#	#	#	#	.	#	#	#
9	#	^	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	#	#	#	.	#	#	#	#
4	#	.	.	.	.	.	.	.	.	+
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	.	#	.
7	#	#	.	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	#	#	.	#	#	#	#	#	#
3	#	#	#	.	.	.	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	.	#	#	.	#	#	.
7	#	#	#	.	#	#	#	#	#	.
8	.	#	#	.	#	#	#	#	.	#
9	#	>	.	.	#	#	#	#	.	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	.	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	.	#	#	#	.
5	#	.	#	#	#	#	.	#	#	#
6	#	.	#	#	.	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	.	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	+	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	.	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	+	.	.	.	.	.	.	.	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	^	#
3	#	#	#	#	#	#	+	#	.	#
4	#	#	#	#	#	#	.	#	.	#
5	#	#	#	#	#	#	.	.	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	.	+	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	.	.	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	+	.	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	+	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	+	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	+	.	#	#	#	#
9	#	#	#	#	#	.	.	.	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	#	#	#	#
2	.	+	.	.	.	.	.	.	<	#
3	#	#	.	#	#	.	#	#	#	#
4	#	#	.	#	#	.	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	.
9	#	#	#	#	#	#	.	#	.	.
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	.	#	#
2	#	#	#	#	#	.	#	#	+	#
3	.	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	#	.	#
5	.	#	#	#	.	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	.	#	#	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	.	#	#	.	#
2	#	#	#	#	.	.	#	#	#	#
3	#	#	#	#	.	.	#	.	#	#
4	.	.	.	.	+	.	.	#	#	.
5	#	#	#	.	.	v	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	#	.	.	#	#	#	#
8	#	#	#	.	#	.	#	#	.	#
9	#	#	.	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	.	#
2	#	>	.	#	#	.	#	#	#	#
3	+	#	.	.	#	#	#	.	#	#
4	.	.	.	#	#	#	#	.	#	#
5	#	#	.	#	#	.	#	#	#	#
6	#	.	.	#	.	#	.	.	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	.
9	#	#	#	#	#	#	#	#	.	#
10	.	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	>	.	.	.	.	.	.	+	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	.	#	#	.
6	#	.	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	.
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	v	#	#	#	#	#	#	.	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	.	#
5	#	.	#	#	#	#	.	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	.	#	#	#	.	#	#	#	#
8	#	+	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	.	#	.
10	#	#	.	#	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	.	.	#	#	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	.	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	+	#
9	#	#	#	#	#	#	#	.	v	#
10	#	#	#	#	#	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	.	#	#	#	#	#
2	.	<	+	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	.	#
4	#	#	#	#	.	#	#	#	#	#
5	.	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	.	.	+
2	.	.	#	#	#	#	#	#	<	.
3	#	#	#	#	#	.	#	#	.	.
4	#	#	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	.	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	.	>	#	#	#	#
6	#	#	#	#	+	#	#	#	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	+	#	#	.	<	#
3	#	#	#	#	.	#	#	.	#	#
4	#	#	#	#	.	#	#	.	#	#
5	#	#	#	#	.	.	.	.	.	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			turnLeft
		}
		moveForward
		moveForward
		moveForward
		turnLeft
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	v	#	#	.	#
6	#	#	#	#	#	.	.	.	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	+	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			turnLeft
		}
		moveForward
		moveForward
		moveForward
		turnLeft
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	.	+	#	#	.
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	.	#	#	#	.
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	.	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	.
8	#	#	#	.	#	#	#	#	#	#
9	.	>	.	.	#	#	#	#	#	.
10	#	#	#	+	#	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	.	#	<	#
10	#	#	#	#	#	#	.	+	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	.	.	#	#	#
4	#	#	#	#	+	#	.	#	#	#
5	#	#	#	#	#	^	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	+	#	#	#	#	#	#	#	#	#
9	.	<	#	#	#	#	#	.	#	#
10	#	.	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	#	#	#	#	#
2	.	v	.	#	#	#	#	#	#	#
3	+	.	#	#	.	#	#	#	#	#
4	.	#	#	#	#	#	#	.	#	#
5	.	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	.	.	#	#	#	#	#	#	#	#
10	#	.	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	>	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	.	+	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	+	#	#	#	#	#	#
2	#	^	#	.	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	.	#	#	#
2	#	#	+	.	.	.	.	.	<	#
3	#	#	.	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	.	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	#	#	#	v	#	#	#	#
6	#	#	#	#	.	.	#	#	.	#
7	#	.	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	+	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	.	#	#	#	#	.	<	#
3	#	#	#	#	#	#	.	.	#	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	.	#	.	#	#
6	#	#	#	#	#	#	.	.	#	.
7	.	#	#	#	#	#	#	.	#	#
8	#	.	#	.	#	#	#	.	#	#
9	.	#	#	#	#	.	#	+	#	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	+	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	#	#	.	#	#	#	#	.	#
3	.	.	#	#	#	#	#	#	#	.
4	.	#	#	#	#	#	#	#	#	.
5	#	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	+	#	#	#	#	#	#
9	#	>	.	.	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	.	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	.
4	#	#	#	.	#	#	#	#	#	#
5	.	#	#	.	.	<	#	#	#	#
6	.	#	#	+	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	.	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	.
2	#	>	.	.	.	.	.	.	.	+
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	.
9	#	.	#	#	#	#	#	#	#	#
10	#	.	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	.	#	#	#	#	#	#	#	v	.
3	#	#	#	#	#	#	#	#	.	#
4	.	#	.	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	.	#
7	#	#	.	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	+	#
10	#	.	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	.
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	.	#	#	#	#	#	.	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	.
9	#	^	.	.	.	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	.	#	#	#	#	.	#
4	.	#	#	#	#	.	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	.	#	#	#	+	#
8	#	#	#	#	#	.	#	#	#	.
9	#	.	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	>	#
3	#	.	#	#	#	#	#	#	.	#
4	#	#	.	#	#	#	.	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	.	#	#	#	#	#	#	+	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	.	.	#	#	.	.	#	#
9	#	<	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	+	#	#	#	#	#	#	#
2	#	>	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	+	#	#
2	#	#	#	#	#	#	#	.	^	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	.	.	.
2	#	#	#	#	#	#	#	.	^	#
3	.	#	#	.	#	#	#	.	.	#
4	#	#	#	.	#	#	#	.	.	.
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	.	.	.
7	.	#	#	#	#	#	#	.	.	#
8	.	.	.	.	.	.	.	.	#	#
9	.	#	.	.	.	.	#	#	#	#
10	+	#	#	.	#	#	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		turnLeft
		If(pathAhead){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			moveForward
			moveForward
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	v	.	.	.	.	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	+	#
5	#	#	#	#	#	#	.	#	.	#
6	#	#	#	#	#	.	.	.	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	RepeatUntil(goal){
		If(pathRight){
			turnLeft
		}
		Else{
			moveForward
		}
		turnLeft
		If(pathAhead){
			turnRight
		}
		Else{
			turnLeft
			turnLeft
			moveForward
			moveForward
		}
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	+	#	#	#	#	#
8	#	.	.	.	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	+	#	#	#
7	#	#	#	#	#	#	.	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	.	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	+	.	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	.	.	#	#	#	#	#	#
8	#	.	#	.	#	#	#	#	#	#
9	#	^	#	+	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	+	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	<	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	^	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	+	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	.	#	#	#	#	#	#	#	v	#
3	#	#	#	#	.	#	#	#	.	#
4	#	.	#	#	#	#	#	#	.	+
5	.	.	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	.	#	#	.
9	#	.	.	#	#	#	#	#	#	#
10	#	#	#	#	#	.	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	.	<	#	#	#	#
6	.	#	#	+	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	.	#	#	#	#
10	#	.	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	<	.	.	#	#	.	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	.	#	#	.	#	#	#
5	#	#	.	.	#	#	#	#	#	.
6	#	#	#	.	.	#	#	#	#	.
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	.	.	#	#	#	#
10	#	#	#	#	#	+	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		turnRight
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	+	#	#	#	#
4	#	#	#	#	#	.	.	#	#	.
5	#	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	.	#	#	#	#	.	.	#	#
8	#	#	#	.	#	.	#	.	#	#
9	#	#	#	#	#	#	#	.	>	#
10	.	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		turnRight
		moveForward
		turnRight
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	#	.	#	#	+	>	#	#	.	#
6	#	#	#	#	.	.	#	#	#	#
7	#	#	#	.	#	#	#	.	#	#
8	#	.	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	#	#
10	#	.	#	#	#	.	#	.	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	^	.	#	#	#	#	#	.	#
3	#	+	.	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	.	#	#	#	#	.	#	.
9	#	#	#	#	.	#	#	#	.	#
10	#	#	#	#	.	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	+	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	<	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	+	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	#	#	#	#
2	#	#	+	.	.	#	#	#	#	#
3	#	#	#	.	.	.	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	.	<	.	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	v	.	#	#	#	#	#	#	#
3	#	#	.	.	#	#	#	#	#	#
4	#	#	.	.	+	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		If(pathAhead){
			turnLeft
		}
		Else{
			turnRight
		}
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	+	#	.	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	.	#	#	#	#	#	#
6	.	.	#	#	#	#	.	#	#	.
7	#	.	#	#	.	#	#	.	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	>	.	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	+	.	.	.	.	.	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	>	.	.	.	.	#	#	#	#
10	#	#	#	#	#	.	+	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	+
5	#	#	#	#	#	#	#	#	.	.
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	.	#	#	.
2	#	#	#	#	#	#	#	#	>	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	.	#	#	.	#	#	#	#	#	.
6	#	#	#	#	#	#	#	.	#	.
7	#	#	.	#	#	#	.	#	#	.
8	.	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	.	#	#	#	.
10	#	.	#	#	.	#	#	#	.	+

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	+	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	<	.	#	#	#
6	#	#	#	#	#	#	+	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	.	#	#	#	#	#	#	.	#
8	#	#	#	.	#	#	#	#	.	#
9	#	<	.	.	.	.	.	.	.	+
10	#	.	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	+	#
2	#	#	.	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	.	#	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	#
7	#	.	#	#	#	.	.	#	.	#
8	#	#	#	.	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	RepeatUntil(goal){
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	+
9	#	#	#	#	#	#	#	#	^	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	v	#
3	#	#	#	#	#	#	#	+	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	^	.	.	#	#	.	#	.	#
3	#	#	#	.	#	.	#	#	#	#
4	#	+	.	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	+	#
8	#	#	#	#	#	#	.	#	#	#
9	#	.	#	#	#	.	.	.	v	#
10	.	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnRight
		moveForward
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	.	.
5	#	#	#	#	#	<	.	#	#	#
6	.	#	#	#	#	#	+	#	#	#
7	#	#	.	#	#	#	#	#	.	.
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	#	.	#	.	#	#
7	#	#	.	#	#	#	#	#	#	.
8	#	.	+	#	#	#	#	#	#	#
9	#	v	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	RepeatUntil(goal){
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	.	+
2	#	#	#	#	#	#	#	#	^	#
3	#	.	#	.	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	.	.	#	#
8	.	#	.	#	.	#	.	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	.	#	#
2	#	#	#	#	.	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	.	.	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	.
9	#	v	#	#	#	#	#	#	#	#
10	+	.	.	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	.	.	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	.	#	#	#	+	#	.
9	#	#	#	#	#	#	#	.	<	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	+
2	#	#	#	#	#	#	.	#	^	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	.	#	#	#	#	#
6	#	#	#	.	#	#	.	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	.	.	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	.	>	#
3	#	#	#	#	#	#	+	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	+	#	#
5	#	#	#	#	#	<	.	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	.	#	.	#	#
2	#	v	.	#	#	#	#	.	.	#
3	#	.	.	.	.	.	.	.	+	#
4	#	.	#	#	#	#	#	.	#	#
5	#	.	#	#	#	#	#	.	.	#
6	#	.	#	#	#	#	#	.	#	#
7	.	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	.	#	+
3	#	#	.	.	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	.	#	#	#	.
7	#	#	#	#	#	.	#	#	#	.
8	#	#	.	#	#	#	#	#	#	.
9	.	#	#	#	#	#	#	#	>	.
10	#	#	#	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	<	#
3	#	#	#	#	#	#	+	#	.	#
4	#	#	#	#	#	#	.	#	.	#
5	#	#	#	#	#	#	.	.	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	.	.	#	#	#	#	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	.	#	+	#	#	#	#	#	#
9	#	>	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	turnLeft
	RepeatUntil(goal){
		turnLeft
		turnLeft
		moveForward
		moveForward
		turnLeft
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	.	.	#
3	#	#	#	#	#	#	+	#	.	#
4	#	#	#	#	#	#	#	#	.	.
5	#	#	#	#	#	<	#	#	.	#
6	#	#	#	#	#	.	.	#	.	.
7	#	#	#	#	#	#	.	#	.	#
8	#	#	#	#	#	.	.	#	.	.
9	#	#	#	#	#	#	.	#	.	#
10	#	#	#	#	#	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnLeft
		}
		Else{
			turnRight
			turnRight
		}
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	.	.	.	.	.	#	#
3	#	#	#	+	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	.	#
9	#	#	#	#	#	#	#	#	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	RepeatUntil(goal){
		moveForward
		If(pathRight){
			turnLeft
		}
		Else{
			turnRight
			turnRight
		}
		turnRight
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	.	#	.
9	#	#	#	#	#	#	#	#	<	+
10	#	#	#	#	#	#	#	#	.	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	#	#	.	^	#
3	#	#	#	#	#	#	#	.	+	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	.	#	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	.	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	+	.	.	.	.	.	.	.	#
9	.	#	#	#	#	#	#	#	^	#
10	#	#	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	.	.	.	.	.	.	.	.	+
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	.
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		turnLeft
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	v	#	#	.	#	.	#	#	#
3	#	.	#	#	.	#	.	#	#	#
4	+	.	#	#	#	#	#	#	#	#
5	#	.	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	+	.	#	#
9	#	#	.	#	#	#	.	.	<	#
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	RepeatUntil(goal){
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	v	#	#	.	#	#	#	.	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	.	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	.
7	#	.	#	#	#	.	#	#	#	#
8	.	.	#	#	.	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	+	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	.	#
2	#	#	#	#	.	#	#	#	+	#
3	#	#	.	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	.	#	#	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	.	#	#	#	#	#	#	.	#
9	#	.	#	#	#	#	#	#	^	#
10	#	#	#	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	>	.	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	+	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	+	#	v	#
3	#	#	#	#	#	#	.	#	.	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		moveForward
		moveForward
		turnRight
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	.	.	#	#	#	#	#	#	#
3	.	.	.	+	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	.	.	.	.	<	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			moveForward
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	>	.	.	.	.	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	+	.	.	.	.	#	#	#
5	#	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	RepeatUntil(goal){
		If(pathLeft){
			moveForward
		}
		Else{
			moveForward
			moveForward
			turnRight
		}
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	#	#	#	#
2	#	.	#	#	.	#	#	.	#	#
3	#	#	.	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	^	#	#	#	#
6	#	#	#	#	.	+	.	#	#	#
7	#	#	#	#	.	#	.	#	#	#
8	#	#	#	#	.	.	.	#	#	.
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	.	#	#	<	+
3	#	#	#	#	.	.	#	#	.	.
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	.	#	.	#	#	#
9	#	#	#	.	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	.

--- Task 1: Solution ---
","def Run(){
	RepeatUntil(goal){
		turnLeft
		moveForward
	}
}
"
