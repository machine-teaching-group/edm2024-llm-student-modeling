system_prompt,user_prompt,output
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	#	#	#	#
2	+	#	#	#	#	#	#	#	#	#
3	.	.	v	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	#	#	.	#	#	.
5	#	#	.	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	.	.
8	#	#	#	.	.	#	#	#	.	>
9	#	#	#	#	#	#	#	#	.	.
10	#	#	#	#	#	.	.	.	+	.

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	.	.	#	#
3	#	#	#	.	#	#	#	#	#	#
4	.	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	>	.	#	#	#	#	#
8	#	#	#	.	.	#	#	#	.	#
9	#	#	#	.	+	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	.	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	v	#	#	#	#	.	#	#
8	+	.	.	#	.	.	.	.	.	#
9	#	.	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	.	#	#	#
2	#	.	#	#	.	.	.	#	#	#
3	.	.	.	.	+	.	.	#	>	#
4	#	#	#	#	.	.	.	.	.	#
5	#	#	.	#	#	.	.	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	+	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	v	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	^	#	#	#	+	#
3	#	#	#	#	.	#	#	#	.	#
4	#	#	#	#	.	.	.	.	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	.	#	#	#
6	#	.	#	#	#	.	.	>	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	.	.	#	#
10	#	#	#	#	#	.	.	+	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	>	#	#	#	#	#	#	#
3	.	.	.	.	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	#	#
5	#	#	.	+	.	.	#	#	#	#
6	#	#	.	#	#	#	#	#	.	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	.	#	.	#
4	#	#	#	#	#	#	.	.	+	#
5	#	.	.	.	.	^	.	.	.	#
6	#	#	#	#	#	#	.	.	.	#
7	#	#	#	#	#	#	.	#	.	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	.	#	#	#
3	#	#	#	.	#	.	.	#	#	#
4	#	#	#	#	#	.	.	#	#	#
5	#	.	v	.	#	.	.	#	#	#
6	.	.	.	.	.	.	.	+	.	#
7	#	#	#	#	#	.	.	#	#	#
8	#	#	.	#	#	.	.	#	#	#
9	#	#	#	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	<	#	#	#	#	#	#
3	#	#	.	#	#	#	.	#	#	#
4	#	.	.	.	.	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	+	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	+	.	#	#	#	#	#	#	#	#
7	#	v	.	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	.	.	#	.	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	+	#	#	#	#	#
10	#	#	#	<	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	^	#	#	#	#	#	#	#	#	#
3	.	.	.	.	.	#	#	#	#	#
4	+	.	.	.	.	.	.	.	#	#
5	.	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	.	#	#	#
2	#	#	#	#	#	.	.	#	.	#
3	#	#	#	#	#	.	.	#	#	#
4	.	.	.	.	.	<	.	+	#	#
5	.	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	.	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	<	#	#	#	#	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	+	.	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	+	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	#	#	#	>	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	+	.	#	#	#
9	#	#	#	#	#	#	.	.	>	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	+	.	#	#	#	#
7	#	#	#	#	#	.	.	>	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	.	.	.	#	#	#	#	#
8	#	#	#	>	.	#	.	.	#	#
9	#	#	#	#	+	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	.	#	#	#	#	.	#	.	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	.	#	#	#
8	#	.	#	#	#	#	.	#	#	#
9	#	#	#	#	#	.	>	.	.	#
10	#	#	#	#	#	#	#	+	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	.	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	.	.	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	.	.	#	#
8	#	#	#	.	#	#	+	.	#	#
9	#	#	#	#	#	#	.	.	#	#
10	#	#	#	#	.	.	.	<	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	.	#	#	#	#	#	#	#
2	.	.	+	#	#	#	#	#	#	#
3	^	#	.	#	#	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	>	#	#	#	#	#
2	.	#	.	.	#	#	#	#	#	#
3	.	.	.	.	.	.	.	#	.	#
4	.	#	#	+	#	#	#	#	#	#
5	#	#	#	.	#	#	#	.	#	#
6	.	#	.	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	.	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	^	.	.	#	#	#	#
8	#	#	.	.	.	.	+	.	.	#
9	#	.	#	#	.	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	v	.	+	#	#	#	#	#	.	#
3	.	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	.	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	#	#	>	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	#	.	#	#	#	#
2	^	#	#	#	#	#	#	#	#	#
3	.	.	.	.	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	.	.	#	#	#	#	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	.	.	#	#	#	#	#	#	#	#
8	.	.	+	.	.	.	.	.	.	#
9	.	.	#	.	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	^	#	#	#	#
2	#	#	#	#	.	.	#	#	#	#
3	.	.	.	.	.	.	#	#	#	#
4	#	#	.	#	#	.	#	#	#	#
5	#	#	.	#	#	.	#	#	#	#
6	#	#	.	#	#	.	#	.	#	#
7	#	#	.	.	.	.	.	+	.	#
8	#	.	#	#	#	.	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	.	#	.	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	^	.	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	#	#	#	#
2	.	.	#	#	#	#	#	#	#	#
3	.	#	#	#	.	#	#	#	#	#
4	+	.	.	.	.	#	#	#	.	#
5	.	.	#	#	#	#	#	#	#	#
6	.	#	#	#	.	#	.	#	#	#
7	.	#	#	#	#	#	#	#	.	#
8	.	.	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	<	#	#	#	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	.	v	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	.	.	#	#	#	#	#	#	#	#
6	+	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	+	.	#	#
8	#	#	#	#	#	#	#	.	.	.
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	<

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	.	#	#	#
2	#	#	#	.	.	#	#	#	#	#
3	#	#	#	.	+	#	#	#	#	#
4	#	#	#	.	.	#	#	#	#	#
5	#	#	#	.	.	#	#	#	#	#
6	#	#	.	^	.	.	.	.	#	#
7	#	#	#	.	.	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	.	#	#	#	#	.	.	#	#	#
4	#	#	#	#	#	.	.	#	#	#
5	#	#	#	#	>	.	.	.	#	#
6	#	#	#	.	.	.	.	+	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	+	#	#	#	#	#	#	#	#
4	.	.	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	.	^	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	v	.	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	+	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	>	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	+	.	#	#	#	#	#	#
3	#	#	#	.	.	^	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	.	#	#	#	#
5	#	.	.	#	.	.	#	#	#	#
6	#	.	.	.	#	.	#	#	#	#
7	#	+	.	.	#	.	#	#	#	#
8	#	.	.	.	#	.	#	#	.	#
9	#	.	.	.	.	.	v	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	>	#	#	.	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	.	.	.	.	.	.	.	#
8	#	+	.	.	.	.	.	.	.	#
9	#	#	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	<
7	#	#	#	.	.	.	.	.	.	.
8	#	#	#	+	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	.	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	.	#	.	.	#	#
6	#	#	#	.	.	#	.	.	+	#
7	#	#	.	.	.	.	.	.	.	#
8	#	#	>	#	.	#	.	.	#	#
9	#	#	#	#	.	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	+	.	#	#	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	#	#	v	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	>	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	.	.	#	#	#	#
4	#	#	#	#	+	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	.	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	.	+	#	#	.	#	.	#
5	.	.	#	#	#	#	#	#	#	#
6	^	.	#	#	#	#	#	#	.	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	.	+	#	#	#	#	#
8	#	.	.	#	#	#	#	#	#	#
9	#	^	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	.	#
5	#	#	#	#	#	+	#	.	.	#
6	#	#	#	#	#	.	#	.	.	#
7	#	#	.	.	.	.	.	.	^	#
8	#	#	#	#	#	.	#	.	.	#
9	#	#	#	#	#	.	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	.	#	#	.	#	#	#	#	#
3	.	.	#	.	#	#	.	#	#	#
4	.	.	+	.	.	.	.	#	.	#
5	.	.	.	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	>	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	.	.	.	.	#	#	#	#	+	#
3	#	#	.	#	.	#	#	#	.	#
4	#	.	#	#	#	#	#	#	.	v
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	.	#	#	#	.	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	+	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	.	#	#
4	#	.	v	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	.	#	#
2	.	.	.	#	#	.	#	.	#	>
3	#	#	#	#	#	.	#	.	.	.
4	#	#	#	#	#	.	#	.	#	#
5	#	#	.	#	#	.	.	.	#	#
6	#	#	.	#	#	+	#	.	#	#
7	#	#	#	#	#	.	#	.	#	#
8	#	#	#	#	#	.	#	.	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	>	#
3	#	#	#	#	#	#	.	.	.	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	.	.	.	#	#	#
6	#	#	#	#	+	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	+	#	#	#	#	#	#	#
5	#	#	.	.	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	^	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	.	#	#	#	#	#	.	.	.
5	#	#	#	#	#	.	.	#	.	.
6	.	#	#	#	#	#	.	#	.	.
7	#	#	#	#	#	#	.	#	.	.
8	#	#	#	#	#	#	.	#	.	+
9	#	#	#	.	.	.	.	.	.	.
10	#	#	#	#	#	#	>	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	+	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	.	.	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	v	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	^	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	.	.	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	+	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	.	.	#	^	#	#	#	#	#
4	#	#	.	.	.	#	#	#	#	#
5	#	#	#	#	+	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	<	.	+	#	#	#	#	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	.	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	.	#	#	.	v	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	.	.	.	.	#	.	#	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	#	#	.	#	#	.	#
8	#	#	#	#	.	.	#	.	.	#
9	#	#	#	#	#	.	.	.	.	#
10	#	#	#	#	#	.	.	.	.	+

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	#	#	#	#	#
2	.	.	.	.	.	.	.	.	.	<
3	#	.	.	#	#	#	#	#	#	#
4	#	#	.	#	.	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	#	#	+	#	.	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	.	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	^	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	.	.	.	.	+	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	.	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	.	#	#	.	#	#	#	#
10	+	.	.	>	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	+	.	.	#	#	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	.	<	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	v	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	.	.	.	.	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	+	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	.	#	#	#	#	#
2	#	>	.	.	.	#	#	#	#	#
3	.	.	.	.	.	.	.	#	#	#
4	#	.	#	#	+	#	#	#	#	#
5	#	.	#	#	.	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	+	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	.	.	<	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	+	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	v	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	.	.
3	#	#	#	#	#	#	#	#	.	+
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	.	.	.	.	.	.	.	.	#
8	#	#	#	#	#	.	.	.	.	v
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	+	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	>	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	<	.	#	#
2	#	#	#	#	.	#	#	.	#	#
3	#	#	#	#	#	#	#	+	#	#
4	.	#	#	#	#	#	.	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	.	.	^	#	#	#	#	#	#	#
3	#	+	.	.	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	.	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	.	^	#	#	.	#
2	#	.	.	#	+	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	.	#	#	#	#	.	#	#
3	#	#	#	.	#	#	#	.	#	#
4	#	.	^	.	.	#	#	.	#	#
5	#	#	#	.	.	#	#	#	#	#
6	.	.	.	.	.	.	.	.	.	#
7	#	#	#	.	#	+	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	>	#	#	#	#
8	#	#	#	.	.	.	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	+	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	v	#	.	#	#	#	#	#	#	#
7	.	.	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	+	#	#	#	#	#	#	#
2	#	#	.	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	v	#	.	#	#	#	#	#	#
7	#	.	.	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	^	.	.	.	+	#	#
2	#	#	#	.	#	#	#	#	.	#
3	#	.	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	.	#	#
5	#	#	#	.	#	#	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	+	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	.	.	.	.	.	.	<	.	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	+	.	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	>	.
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	.	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	>	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	.	.	.	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	^	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	.	+	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	.	.	.	#	#	#	#	#
8	#	#	>	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	.	.	.
7	#	.	.	.	.	.	.	.	.	>
8	#	#	#	#	#	#	#	.	#	.
9	#	#	#	#	#	#	#	.	#	.
10	#	#	#	#	+	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	.	.	+	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	<	.	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	+	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	v	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	+	.
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	v

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	+	#
3	#	#	#	#	#	#	.	.	.	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	^	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	+	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	.	.	<	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	+	#
4	#	#	#	#	#	#	.	.	.	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	<	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	.	#	#	#	#	.	#	#	#
3	.	.	.	#	#	#	.	#	.	#
4	^	.	.	.	.	.	.	.	#	#
5	.	.	#	#	#	#	.	#	#	#
6	.	#	#	.	.	.	.	+	#	#
7	.	.	#	#	#	#	.	#	#	#
8	.	.	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	.	#	.	#	#	#	#
3	#	#	#	.	#	.	#	.	#	#
4	#	#	#	.	#	.	#	.	#	#
5	.	.	+	.	.	.	.	.	#	#
6	#	#	.	.	#	.	#	.	#	#
7	#	#	#	.	#	.	#	>	#	#
8	#	#	#	.	#	#	#	.	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	+	#	#
6	#	.	.	.	.	.	.	.	.	#
7	#	#	.	.	.	.	.	.	.	#
8	#	#	.	.	.	.	.	.	.	#
9	#	#	#	#	#	.	.	.	#	#
10	#	#	#	#	#	v	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	+	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	^	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	>	#	#	#	#	#
8	#	#	#	#	.	.	.	#	#	#
9	#	#	#	#	#	#	+	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	+	#	#	#	#	#	#	#	#
3	#	.	.	.	.	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	v	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	+	#	#	#	#	#
7	#	#	#	#	.	.	.	.	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	v	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	.	.	#	.	#	#
6	#	#	#	#	.	.	#	.	#	#
7	#	#	#	#	.	.	#	.	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	#	#	#	.	.	#	.	#	#
10	#	#	#	#	v	#	+	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	.	.	.	.	#	#
9	#	#	#	#	.	#	#	.	#	#
10	#	#	#	#	v	#	+	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	.	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	+	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	.	#	#	#	.	#	#	.	#	#
8	<	.	.	.	.	.	.	.	.	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	.	#	#	#	.	#
5	#	#	#	#	.	#	#	#	#	#
6	#	+	.	.	.	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	.	.	.	.	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	v	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	v	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	+	.	.	.	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	.	.	#	#	#	#
5	#	#	#	>	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	+	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	>	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	#	#	.	.	#	#	#	#	#
10	#	#	#	+	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	>	#	#	#	#	#
2	#	#	#	#	.	#	.	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	.	.	.	+	.	.	.	.	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	.
3	#	#	#	#	#	#	#	#	#	+
4	.	.	.	.	.	.	.	^	.	.
5	#	#	#	#	#	#	.	#	#	.
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	.	.	v	.	.	.	.	.	#
8	#	+	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	+	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	>	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	+	#	^	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	>	#	#
6	#	#	.	.	.	.	.	.	#	#
7	#	#	#	#	.	.	.	.	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	+	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	.	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	+	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	.	#	#	.	#	#	#	#
9	.	#	#	#	#	.	.	.	.	#
10	#	#	#	#	<	.	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	.	#	#	#
3	#	.	#	#	#	#	#	#	.	#
4	.	#	#	#	#	.	#	.	.	#
5	#	#	#	#	#	#	.	#	.	#
6	#	#	#	#	#	.	.	#	.	#
7	#	#	.	.	.	.	.	.	+	#
8	#	#	#	#	#	#	>	#	.	#
9	#	#	#	#	#	#	.	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	.	#	#
2	v	.	#	#	#	#	#	#	#	#
3	.	.	#	#	#	#	#	.	.	#
4	#	+	.	#	#	#	#	#	#	#
5	#	.	#	#	#	.	#	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	.	#
4	.	#	#	#	#	#	#	#	.	#
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	.	.	.	.	.	.	.	<
8	#	#	#	#	#	#	#	.	.	#
9	#	#	#	#	#	#	#	.	.	#
10	#	#	#	#	#	.	+	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	.	.	#	.	#	#	#	#
5	#	#	.	.	#	#	.	#	#	#
6	#	#	.	+	#	#	#	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	.	.	.	.	#	#	#	#	#	#
9	>	.	.	#	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	.	.	#	.	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	+	#	#	.	#	#	#	#	#	#
6	.	.	<	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	.	.
5	#	#	#	#	#	#	#	#	.	v
6	#	#	#	#	#	#	.	#	.	.
7	#	.	.	.	.	.	.	.	+	.
8	#	#	#	#	#	#	#	#	.	.
9	.	#	#	#	#	#	#	#	.	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	.	.	#	#	#
2	#	+	#	#	#	.	.	#	#	#
3	.	.	.	.	.	.	.	#	#	#
4	#	.	#	#	#	.	.	#	#	#
5	#	#	#	#	#	#	^	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	#	#
5	#	.	.	+	.	.	.	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	.	.	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	.	.	.	#
10	>	.	.	#	#	#	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	+	#	#	#	#	#	#
2	#	#	.	.	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	.	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	^	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	+	.	#	#	#	#	#
3	#	#	#	#	.	.	.	#	#	#
4	#	#	#	#	#	#	.	.	<	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	^	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	.	+

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	.	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	.	.	#	#	#
5	#	#	#	#	#	.	.	#	#	#
6	#	#	.	.	.	+	.	.	#	#
7	#	#	#	#	#	.	.	#	#	#
8	#	#	#	#	#	.	.	#	#	#
9	#	#	#	#	#	#	v	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	.	.	#	#	#	.	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	v	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	.	+	.	#	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	#	#	#	#	#
2	.	.	v	.	#	#	#	#	#	#
3	#	#	.	.	.	#	#	#	#	#
4	#	#	.	+	#	#	.	.	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	.	#	#	#	#	#
4	.	#	#	.	#	#	#	#	#	#
5	#	.	#	.	#	#	.	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	.	#	.	.	#	#	#	#	#	#
9	#	#	.	.	#	#	.	.	.	#
10	#	#	v	.	#	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	.	.	#	#	#
2	#	#	#	#	#	.	.	#	#	#
3	.	.	.	.	.	.	^	#	#	#
4	.	.	.	.	.	.	.	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	.	.	+	.	#	#	#
7	#	#	.	#	#	.	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	.	.	.	#
4	#	#	#	#	+	.	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	^	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	.	.	.	#	#	#	#	#
4	+	.	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	^	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	#	#	v	#	#	#	#	#	#	#
7	#	#	.	.	.	.	.	.	.	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	+	#	#	#	#	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	.	+	#	.	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	^	.	.	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	.	#
5	#	.	.	#	#	#	#	#	#	#
6	#	.	.	.	#	#	.	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	.	.	.	#	#	#	#	#	#	#
9	v	.	.	#	.	.	.	.	.	#
10	#	.	.	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	+	.	.	#	#	#	#	#
8	#	#	#	#	.	^	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	.	#	.	#	#	#	#	#	#	#
3	.	.	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	.	#
6	#	#	+	#	#	#	#	#	#	#
7	#	#	.	>	#	#	#	#	#	#
8	.	#	.	#	#	.	#	#	#	#
9	#	#	.	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	+	#	#	#	#	#	#	#
5	#	#	.	>	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	.	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	+	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	<	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	.	#	.	#	#
2	#	#	#	.	#	.	.	.	.	#
3	#	#	#	^	.	.	#	.	.	+
4	.	.	.	.	.	.	.	.	#	#
5	#	#	#	.	#	.	#	.	#	#
6	#	#	#	.	#	.	#	.	#	#
7	#	#	#	.	#	.	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	v	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	.	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	+	#	#	#
9	#	#	#	#	.	#	v	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	.	.	.	.	<	.	.	.	#	#
4	.	#	#	#	#	.	#	.	#	#
5	#	#	#	.	#	#	+	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	.	.	.	#
4	#	#	#	#	#	#	.	#	+	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	v	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	^	#	#	#	.	#	#	#
5	#	.	+	.	.	.	.	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	.	+	#	#	#	#	#	#	#	#
9	#	v	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	+	.	#	#	#	#	#	#
3	#	#	#	.	#	v	#	#	#	#
4	#	#	#	.	#	.	#	#	#	#
5	#	#	#	.	.	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	>	.	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	.	.	.	.	#	#	#	#
9	#	#	+	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	.	.	#	.	#
4	.	.	.	.	.	.	.	.	.	#
5	#	#	.	.	.	+	#	#	^	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	.	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	.	.	.	#	#
5	#	#	#	#	+	#	#	^	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	.	.	#	#	.	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	>	.	#	#	#
8	#	#	#	.	#	.	.	+	#	#
9	#	#	#	#	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	v
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	+	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	.	#	#	.	.	.	#	#	#
8	.	#	#	#	.	.	#	#	#	#
9	#	^	.	#	.	.	.	#	#	#
10	#	#	.	.	.	+	#	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	.	#	#	#
4	#	#	.	.	#	.	>	#	#	#
5	#	#	.	.	.	.	.	#	#	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	+	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	.	#	#	#
2	#	.	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	.	#	#	.	#	#	#
5	#	#	#	.	#	#	.	#	#	#
6	#	#	#	v	.	.	.	#	#	#
7	#	#	#	.	#	#	.	#	.	#
8	#	#	#	#	#	+	.	.	.	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	#	#	#
2	.	#	#	#	.	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	.	#
5	#	#	.	.	<	.	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	+	#	.	#	#	#	#	#
8	#	#	.	.	.	#	.	.	#	#
9	#	#	.	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	+	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	<	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	+	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	#	<
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	.	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	#	#	#	#	#	.	.	#
4	#	#	#	#	#	#	#	.	+	#
5	#	#	#	#	#	#	#	<	.	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	.	.	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	.	#
8	#	#	.	.	.	.	.	.	+	#
9	#	#	#	#	#	#	#	<	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	.	+
2	#	#	#	#	#	.	#	.	#	.
3	.	.	.	.	.	.	#	.	#	.
4	#	.	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	.	.	.	.	.	.	^	.	#
7	.	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	v	#	#	#	#	#	#	#
2	.	.	.	.	.	#	#	.	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	.	#	.	#	#	#	#	#
5	.	.	.	#	#	.	#	#	#	#
6	+	.	.	.	.	.	.	.	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	+	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	>	.	#	#	#	#	#	#	#
6	#	#	.	#	#	#	.	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	+	#	#	#	#	#	#	#	#
4	#	.	.	.	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	.	.	#	#	#	#
7	>	.	#	#	.	.	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	.	^	#
7	.	#	#	#	#	#	.	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	#	.	#	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	+	.
9	#	#	#	#	#	#	.	#	#	>
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	.	#	.	#	#
7	#	#	.	.	#	.	#	.	#	#
8	#	#	.	.	#	.	#	#	#	#
9	#	#	.	.	#	.	#	#	.	#
10	#	#	+	.	.	.	^	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	+	#
2	.	.	.	#	#	#	#	#	.	#
3	#	#	.	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	.	#	#	.	#	#	>	#
6	.	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	+	#	#	#	#	#
2	#	#	#	.	.	#	#	#	#	#
3	#	#	#	.	#	#	>	#	#	#
4	#	#	#	.	.	.	.	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	^	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	+	.	#	.	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	#	#
2	#	#	#	.	.	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	.	.	.	.	.	+	#	#
5	#	.	v	.	.	.	.	#	#	#
6	#	#	#	.	.	#	#	#	.	#
7	#	#	#	.	.	#	#	#	#	#
8	#	.	#	#	.	#	#	#	.	#
9	#	#	#	#	.	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	.	#	#
2	#	#	.	#	#	#	.	.	#	#
3	#	#	#	#	#	#	.	.	.	^
4	#	#	#	#	+	.	.	.	#	#
5	#	#	#	#	#	.	.	.	#	#
6	#	#	#	#	#	.	.	.	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	v	#	#	#	#	#
6	#	.	#	.	.	#	#	#	.	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	+	#	.	.	#	#
9	#	#	#	#	.	#	.	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	.	.	#	.	#	#	.	#
2	.	#	.	.	#	#	.	#	#	#
3	+	.	.	<	#	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	.	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	<	.	#	#	#	#	#	#
2	#	.	.	#	#	#	#	#	#	#
3	#	+	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	.	.	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	.	#	.	.	#
8	#	.	#	#	#	#	v	.	.	#
9	#	#	#	#	#	#	.	.	+	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	v	.	.	#	#	#
8	#	#	#	#	.	.	+	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	.	#	.
5	#	.	.	.	.	.	.	+	.	.
6	#	#	#	#	#	#	#	#	#	^
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	.	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	.	#	.	#	.	#
8	#	#	#	.	.	#	.	#	#	#
9	#	#	#	.	.	#	.	#	#	#
10	#	#	+	.	.	.	.	.	>	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	^	#	#	#	#	#	#	#
3	.	#	.	#	#	#	#	#	#	#
4	.	.	.	.	.	.	.	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	.	.	.	.	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	+	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	.	#
4	#	#	#	#	#	.	.	#	#	#
5	#	#	.	.	.	.	+	#	#	#
6	#	#	#	#	>	.	.	#	.	#
7	.	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	.	#	.	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	.	.	v	.	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	+	#	#	#	#	#
5	#	#	#	.	.	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	#	#	#	#
2	.	#	.	#	#	#	#	#	#	#
3	#	#	.	#	.	#	#	.	#	#
4	#	#	.	.	.	#	#	#	#	#
5	#	#	+	.	.	.	#	#	#	#
6	#	#	.	#	.	#	#	#	#	#
7	#	#	.	.	.	.	.	.	.	#
8	#	#	.	#	v	.	#	#	#	#
9	.	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	.	#	#	#	.	#	#	#
8	#	.	#	#	#	#	.	.	.	>
9	#	.	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	+	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	#	#
2	.	.	+	#	#	#	#	#	#	#
3	.	.	.	.	.	.	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	v	.	.	.	.	.	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	.	#
2	#	#	.	#	#	#	#	#	#	#
3	.	.	+	.	.	.	#	#	#	#
4	.	.	.	.	.	.	.	.	#	#
5	#	#	.	.	#	#	.	#	#	#
6	#	#	.	.	#	#	#	#	.	#
7	#	#	.	.	#	#	#	#	#	#
8	#	#	.	v	#	#	.	.	#	#
9	#	#	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	.	#
7	#	#	#	#	#	#	.	#	.	#
8	#	#	#	#	#	.	<	.	+	#
9	#	#	#	#	#	#	.	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	.	#	#	.	#
5	#	#	#	.	#	.	#	#	#	#
6	#	#	#	.	#	.	#	#	#	#
7	#	#	#	.	#	.	#	#	#	#
8	#	#	#	+	.	>	#	#	#	#
9	#	#	#	.	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	.	#	+	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	<	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	+	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	.	.	.	#	#	#	#	#	#
4	#	#	#	v	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	+	#	#	#	#	#	#
3	#	.	.	.	#	#	#	#	#	#
4	#	^	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	+	#	#	#	#	#
2	.	.	.	.	.	#	#	#	#	#
3	#	#	^	#	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	.	.	#	#	#	#	#	#	#	#
5	.	v	.	.	.	.	#	#	.	#
6	.	.	#	#	#	#	#	#	.	#
7	.	#	#	#	.	.	.	.	#	#
8	.	#	.	#	#	#	#	#	#	#
9	.	.	.	+	#	#	#	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	.	#	.
4	#	#	#	#	#	#	#	.	#	.
5	#	.	.	.	.	.	+	.	.	.
6	#	#	#	#	#	#	#	.	#	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	.	.	^	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	<	#	#	.	#	#	#	#	#	#
5	.	#	#	.	#	#	#	#	#	#
6	+	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	+	#	#	#	#	#	#	#	#
6	.	.	.	.	.	.	.	.	.	#
7	#	>	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	.	.	+	>	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	.	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	^	#	#	#	#
5	#	#	#	#	#	+	#	#	#	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	.	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	+	#	#
3	#	#	<	#	#	#	.	#	#	#
4	#	#	.	.	.	.	.	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	.	#	#
2	.	.	.	#	#	.	.	.	.	#
3	.	.	.	.	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	v	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	.	#
2	#	#	#	#	#	.	#	#	#	#
3	.	.	.	.	#	^	#	#	#	#
4	.	.	.	.	.	+	.	#	#	#
5	#	#	#	#	#	.	#	.	#	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	#	+	>	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	+	#	#	#
2	#	#	#	#	#	#	.	.	#	#
3	#	.	#	#	#	#	.	.	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	.	.	.	.	.	.	.	.	#
6	#	.	.	.	.	.	.	.	.	#
7	#	.	.	.	.	.	.	.	>	#
8	#	#	#	#	#	#	.	.	.	#
9	#	.	#	#	.	#	.	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	#	#	#	#
2	#	#	#	.	.	#	#	.	#	#
3	.	.	.	.	.	.	.	.	.	+
4	.	#	#	.	.	.	#	#	#	#
5	#	#	#	v	.	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	#	#	#	.	#	#
8	#	.	#	.	.	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	.	#	#	#	#	#
5	#	#	#	.	.	#	#	#	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	#	+	.	.	.	.	.	#
9	#	#	#	.	.	#	#	#	#	#
10	#	#	#	#	.	.	.	.	<	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	v	#	#	#
6	#	#	.	.	.	.	.	.	#	#
7	#	#	#	#	.	#	.	#	#	#
8	#	#	#	#	.	.	.	.	.	#
9	#	#	#	#	.	.	.	#	#	#
10	#	#	#	#	+	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	.	#	#
2	#	#	#	#	#	#	.	.	#	#
3	.	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	<	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	.	#	#	#	#	.	+	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	.	.	#	#	#	#	#
5	#	.	.	.	.	#	#	#	.	#
6	#	.	.	.	.	#	#	#	#	#
7	#	.	.	.	.	.	.	.	.	#
8	#	+	#	.	.	^	.	.	.	#
9	#	.	#	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	v	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	+	.	.	#	#
6	#	#	#	#	#	#	.	<	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	+	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	>	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	+	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	>	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	.	#	#
2	#	#	#	#	.	#	#	#	#	#
3	.	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	v	.	.	.	.	.	#	#	#
6	#	#	#	#	.	#	+	#	#	#
7	#	#	#	#	.	#	.	.	#	#
8	#	#	#	#	.	.	#	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	.	.	#	#
6	#	#	#	#	#	#	.	.	.	#
7	#	#	.	.	v	.	.	.	.	.
8	#	#	#	#	#	#	.	.	#	+
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	.	#	#	.	#
7	.	#	#	#	#	#	.	#	#	#
8	^	#	#	#	#	.	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	+	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	^
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	+
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	.	#	#
6	#	#	v	#	#	#	#	#	#	#
7	.	.	.	.	.	.	.	.	.	#
8	#	#	.	#	#	.	#	#	#	#
9	#	#	.	#	.	.	.	.	.	#
10	#	#	.	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	.	.
3	#	#	.	#	#	#	#	#	.	.
4	.	#	#	#	#	#	#	#	+	.
5	#	#	#	#	#	.	#	#	.	.
6	#	#	#	#	#	#	.	#	#	.
7	#	#	#	.	#	#	.	#	#	.
8	#	#	#	#	.	.	.	.	.	^
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	+	.	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	>	.	.	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	.	#	.	#	#	#	#	#	#	#
8	v	#	.	.	#	#	#	#	#	#
9	.	#	+	#	.	.	.	.	.	#
10	.	.	.	#	#	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	.	#	.	#	#	#	#	#
5	#	#	.	#	.	#	#	#	#	#
6	#	.	.	#	.	#	#	#	#	#
7	#	#	.	#	.	#	#	#	#	#
8	#	#	+	.	>	.	.	.	.	#
9	#	#	.	#	.	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	+	.	>	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	+	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	.	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	>	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	+	.	.	.	.	.	#	#	#	#
10	#	#	#	#	#	.	.	^	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	.	#	#	#	.	#	#
5	#	#	#	.	#	#	.	.	#	#
6	#	#	.	.	#	#	.	^	#	#
7	#	.	.	.	.	.	.	.	.	#
8	#	#	.	.	.	.	.	.	.	#
9	#	#	+	.	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	^	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	+	.	.	.	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	<	.	+	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	^	#	#	#
9	#	#	#	.	.	.	.	.	.	#
10	#	#	#	#	#	#	+	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	#	#	.	#	#	#
3	#	#	.	.	.	#	#	#	#	#
4	.	.	+	>	.	.	.	#	#	#
5	#	#	.	#	.	#	#	#	#	#
6	#	#	.	#	#	#	.	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	#	#	#	.	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	.	.	#	#	^	#
4	#	#	#	#	#	#	#	#	+	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	#
7	#	#	.	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	.	#	#
9	.	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	.	#	#	#	#	.
2	.	#	#	#	#	#	.	#	#	.
3	.	.	.	.	#	#	>	.	.	.
4	#	#	#	#	#	#	#	#	#	+
5	#	#	#	#	#	#	#	#	.	.
6	#	#	#	#	#	#	#	#	.	.
7	#	#	#	#	#	#	.	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	#	#	.	#	.	#	#	#	#	#
3	+	#	.	#	#	#	#	#	#	#
4	.	.	.	<	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	.	#	#	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	^	.	.	.	+	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	+	#	#	#	.	#
3	.	.	.	.	.	#	#	#	#	#
4	.	.	.	.	.	.	.	.	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	<	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	+	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	.	.	.	.	.	.	.	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	#	#	.	.	#	#	#	#
7	#	#	#	#	.	.	.	#	#	#
8	#	#	#	#	.	<	#	#	#	#
9	#	#	#	.	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	+	.	.	.	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	.	.	.	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	.	.	.	.	.	.	.	.	#
6	.	#	#	#	.	.	#	#	#	#
7	.	.	#	#	#	#	#	#	#	#
8	.	<	#	#	#	.	.	.	.	#
9	.	.	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	.	.	.	.	.	+
2	.	.	.	^	.	.	.	#	.	.
3	#	#	#	.	.	#	.	#	.	.
4	#	#	#	#	.	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	#
6	#	.	#	#	.	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	.	+	#	#	#
2	.	.	#	#	#	#	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	.	#	#	#	#	#	.	#	.	#
5	.	#	#	#	#	#	.	#	#	#
6	#	#	.	.	.	.	.	.	#	#
7	#	#	#	#	#	#	.	<	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	.	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	.	+	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	<	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	.	+	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	<	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	.	+	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	.	.	#	#	#	.	#	#
4	#	#	#	#	#	#	#	^	#	#
5	#	#	#	#	#	#	#	.	#	#
6	.	#	#	#	.	#	#	.	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	.	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	.	#	#	#	#	.	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	.	#	#	#	#	#	.	#	#	#
6	#	.	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	.	.	.
8	#	#	#	#	.	.	>	.	.	.
9	#	.	#	#	#	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	>	#	#	#
3	#	#	#	#	#	+	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	>	#	#	#	#
2	#	#	#	#	+	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	#	#	#	.	.	^	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	+	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	>	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	^	#	#	#
5	#	#	#	#	#	#	.	+	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	+	.	#	#	#	#	#
8	#	#	#	#	v	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	.	.	#
6	#	#	#	#	#	#	#	#	.	.
7	#	#	.	#	#	#	#	#	.	.
8	#	#	#	#	#	#	#	#	+	.
9	.	#	#	#	.	#	#	.	.	.
10	#	#	#	#	#	#	#	#	.	<

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	.	v	#
8	#	#	#	.	.	.	+	.	.	#
9	#	#	#	#	.	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	+	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	#	#	#	.	.	#	#	#
4	#	#	#	<	.	.	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	^	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	.	.	#	#	#	#	#	#	#	#
9	#	.	.	+	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	+	#	#	#	#	#	#
7	#	#	^	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	.	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	v	#	#	#	#	#
4	.	.	.	+	.	.	.	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	.	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	#	.	#	#	#	#	.	#	#
3	.	#	.	#	#	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	#
5	+	#	.	#	#	#	#	#	#	#
6	.	.	.	#	#	#	#	#	#	#
7	.	.	.	<	.	.	.	.	.	#
8	.	#	.	#	#	#	#	#	#	#
9	.	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	.	#	#	#	#	#	#
2	#	.	.	+	#	#	#	#	#	#
3	#	.	#	.	#	#	#	#	#	#
4	.	.	.	.	.	.	.	#	#	#
5	#	^	#	.	.	.	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	v	#	.	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	.	.	.	.	.	.	.	.	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	.	.	.	.	.	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	.	#	#	.	#	#	#	#	#
10	#	#	#	#	+	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	+	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	^	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	.	#	#	#	#	#	#	.	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	.	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	>	#	#	#	#	#	#	#	#	#
8	.	#	.	.	#	#	.	.	#	#
9	.	.	.	+	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	+	.	.	.	#	#	#
3	#	#	#	#	#	#	.	#	#	#
4	.	#	#	#	#	#	<	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	.	.	+	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	v	#	.	#	#	#	#	#
7	#	#	.	.	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	<	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	.	.	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	+	.	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	#	<	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	.	.	#	#
9	#	#	#	#	#	^	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	+	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	<	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	.	#	#	#	#	#
4	.	.	+	.	.	.	.	#	#	#
5	#	.	.	.	.	.	#	#	#	#
6	#	.	#	#	.	#	#	#	#	#
7	<	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	<	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	+	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	#	#
2	.	<	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	+	.	#	#	#	#	#	#	.	#
7	.	.	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	.	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	^	.	#	#	#
3	#	#	#	#	+	.	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	.	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	^	#	#	#	#	#	#	#	#
3	+	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	.
6	#	#	.	#	#	#	#	#	.	.
7	#	#	#	#	#	#	#	#	.	.
8	#	#	#	#	#	.	.	.	.	+
9	#	#	#	#	#	#	#	#	.	.
10	#	#	#	#	#	#	#	#	>	.

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	.
4	#	#	#	.	#	#	.	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	.	.	.	.	#	#	+
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	.	#	#	#	>	.
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	+	.	#	#	#	#	#	#	#
7	#	#	.	.	.	^	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	+	.	#	#	#	#	#
7	#	#	#	#	.	.	.	^	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	.	.
3	#	#	#	#	#	#	#	.	.	.
4	#	.	.	.	.	#	#	.	.	+
5	#	.	.	.	.	.	.	.	.	.
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	.	#	v	.	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	.	#	#	.	#
2	#	.	.	+	#	.	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	.	.	#	#	#	.	#	#
5	#	v	.	#	#	#	#	#	#	#
6	#	.	.	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	+	#	#	#	#	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	#	.	.	#	#	#	#
8	#	#	#	#	#	v	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	+
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	<	.	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	#	#	#	.	.	.	#	#	#	#
9	#	#	#	#	#	.	.	>	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	+
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	v	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	+	.	>	.	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	.	#	#	.	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	.	#	#	.	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	.	#	#	#	#	#	#
5	.	^	.	#	#	#	#	#	#	#
6	#	.	.	.	.	.	.	.	#	#
7	.	+	#	#	#	.	.	.	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	<	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	.	#	#	#	#	#	#
8	#	#	#	+	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	.	<	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	#	+	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	.	#	.	#	#	#	#
5	#	#	#	#	#	.	#	.	#	#
6	#	#	.	#	#	.	#	#	.	#
7	#	#	>	#	.	.	.	.	.	#
8	#	.	.	.	.	.	#	.	.	#
9	#	#	.	#	#	.	.	.	.	+
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	>	#	#	#	#	#	#	#	#
2	#	.	.	.	.	#	#	#	#	#
3	#	#	#	#	.	.	.	.	+	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	v	#	#
3	#	#	#	#	#	#	.	#	#	#
4	#	#	#	#	#	#	.	+	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	.	.	#	#	#
8	#	#	#	#	+	#	<	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	+	#	#	#	#	#	#	#	#	#
5	.	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	.	#	#	#	#	#	#	#
8	#	#	.	<	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	+	#	#
2	#	#	#	#	.	.	.	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	^	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	.	^	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	.	.	.	.	+
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	+	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	<	#	.	#	#	#	#
6	#	#	#	.	#	.	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	+	#	#	#	#	#	#	#
2	.	.	#	#	#	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	.	#	#	.	#	.	#	#	#
5	.	v	.	.	.	.	.	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	^	#	#	#
5	.	#	.	#	#	#	.	#	#	#
6	#	#	#	#	#	.	.	#	.	#
7	#	#	#	#	#	.	.	#	#	#
8	#	#	.	.	.	+	.	.	.	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	.
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	+
6	#	#	#	.	.	.	.	#	#	.
7	#	#	.	.	.	.	.	.	.	v
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	#	#	#	#	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	^	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	+	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	.	#	#	#	#	#	#
7	#	#	#	.	>	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	^	#	#	#
7	#	#	#	#	#	.	.	#	#	#
8	+	.	.	.	.	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	>	#	#	#	#	#	#	#	#	#
2	.	#	+	#	#	#	#	#	#	#
3	.	#	.	#	#	#	#	#	#	#
4	.	.	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	#	.	.	.	#	#
2	#	#	#	#	#	.	#	.	#	#
3	#	.	.	#	.	+	#	.	#	#
4	#	#	#	#	#	.	#	<	.	#
5	#	#	#	#	#	.	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	.	#	#	#	.	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	.	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	.	#	#	.	+	#	#
2	<	.	.	.	.	.	.	.	#	#
3	#	.	#	.	#	#	.	#	#	#
4	#	#	#	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	.	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	.	.	#	.	#	#	#
6	#	#	.	.	.	.	.	.	.	>
7	.	#	+	#	.	#	#	#	#	#
8	#	.	#	#	.	#	.	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	.	.	.	#	#	#	#
6	#	#	.	#	#	.	#	#	#	#
7	#	#	+	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	<	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	+	.	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	.
9	#	#	#	#	#	^	.	.	.	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	.	.	+	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	<	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	+	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	.	#	.	.	v	#	#
9	#	#	#	.	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	^	#	#	#	#	#	#	#	#
6	#	.	.	#	#	#	#	#	#	#
7	#	#	+	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	+	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	+	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	.	.	.	.	.	.	.	.	#
7	#	#	#	.	.	#	#	#	#	#
8	#	#	#	.	.	#	#	#	#	#
9	#	#	#	.	.	#	.	.	.	#
10	#	#	#	#	>	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	.	.	.	.	#
2	.	.	.	.	.	.	.	.	.	+
3	.	v	.	.	.	.	.	.	.	#
4	#	#	.	.	#	.	.	#	.	#
5	#	#	#	.	.	.	#	#	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	.	+	#	#	#	#	#	#	#	#
9	>	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	<	#	#	#	#
2	#	#	#	#	+	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	+	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	.	.	.	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	^	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	+	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	.	.	.	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	^	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	.	^	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	+	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	.	.	+
2	#	#	#	#	#	#	.	.	#	#
3	.	.	.	.	#	#	v	.	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	.	+	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	.	^
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	<	#	#	#	#	#	#
9	+	#	#	.	#	#	#	#	#	#
10	.	.	.	.	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	+	.	#	#	#	#
5	#	#	#	#	#	.	.	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	.	.	.	>	.	.	#
8	#	#	#	#	#	.	.	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	^	#	#	#	#	#	#
7	.	.	.	.	#	#	#	#	#	#
8	+	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	.	#	#	#	#
2	#	#	#	>	.	.	.	#	#	#
3	.	.	.	.	.	.	.	.	#	#
4	#	#	#	#	.	.	#	.	#	#
5	#	#	#	#	.	#	#	.	+	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	+
5	#	#	#	#	#	#	#	.	.	.
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	.	.	#	#
9	#	#	#	#	#	#	^	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	.	#	#
2	#	#	#	#	.	#	#	.	#	#
3	#	#	#	#	+	#	#	.	#	#
4	#	#	#	#	.	.	.	>	#	#
5	#	#	#	#	.	#	#	.	#	#
6	#	#	#	#	.	#	#	.	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	<	.	.	.	#	#
9	#	#	#	#	#	#	#	+	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	<	.	.	.	.	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	+	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	^	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	+	#	#	.	#	#
10	#	#	#	#	.	.	.	.	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	+	#	#	#	#	#	#
8	.	.	.	.	#	#	#	#	#	#
9	v	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	.	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	.	#
7	#	#	#	.	#	.	#	#	.	#
8	#	.	#	.	#	.	#	#	^	#
9	#	.	#	#	.	.	.	.	.	#
10	#	#	#	#	#	+	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	.	.	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	#	.	#	#
4	#	.	.	.	.	+	#	#	#	#
5	#	#	#	#	.	#	#	#	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	.	.	.	#	#	#	#	#
9	#	.	.	.	.	.	#	#	#	#
10	#	^	.	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	>	.	#	.	#	#	.	.	#
2	.	.	.	.	.	#	#	#	#	#
3	#	.	.	.	.	#	#	#	#	#
4	#	.	.	.	.	.	.	.	#	#
5	#	.	.	.	.	#	#	+	#	#
6	#	.	.	#	.	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	#	#	.	>	#	#
2	.	.	.	.	#	#	.	.	#	#
3	.	.	.	.	.	#	.	.	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	.	.	.	#	#
6	#	#	#	.	.	.	.	#	#	#
7	#	#	#	#	#	#	+	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	+	#	#
2	.	.	.	.	.	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	.	.	.	.	.	.	#	.	#	#
5	#	#	#	.	#	#	#	.	#	#
6	#	#	#	.	.	.	.	.	#	#
7	#	#	#	#	.	.	<	.	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	#	+	#	#
2	.	#	#	#	.	.	.	.	#	#
3	.	.	.	.	.	.	#	#	#	#
4	#	#	#	.	.	#	#	#	#	#
5	#	.	#	#	.	#	#	#	#	#
6	#	#	.	#	.	#	#	#	#	#
7	#	#	#	#	.	.	.	.	#	#
8	#	#	#	#	v	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	.	#	#	#	.	#	.	#	.	#
3	.	.	.	#	#	.	.	#	#	#
4	<	.	.	.	.	.	.	#	#	#
5	.	#	#	#	#	#	.	#	#	#
6	#	#	.	.	.	.	.	.	#	#
7	#	#	#	#	#	#	.	+	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	#	.	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	v	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	.	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	+	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	.	.	.	#	.	#	#
6	#	#	#	.	.	.	#	.	.	#
7	#	#	#	.	.	.	#	.	.	#
8	#	#	#	>	.	.	.	.	+	#
9	#	#	#	.	.	.	#	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	.	.	>	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	#	.	.	.	+
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	+	#
4	#	#	#	#	#	^	#	#	.	#
5	#	#	#	#	#	.	#	#	.	#
6	#	#	#	#	#	.	.	.	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	#	#	.	#	#	#	.	#	#
3	.	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	<	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	.	#	#
7	.	#	#	#	#	#	#	#	#	#
8	+	#	.	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	.	#	#	.	#	#
6	#	#	#	#	v	.	.	.	#	#
7	#	#	#	.	.	.	.	+	.	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	+	.	#	#	#	.	#	#	#	#
9	#	.	#	#	.	#	#	#	#	#
10	#	^	#	#	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	.	#	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	.	.	#	#	#	#	#	#
6	#	.	.	.	#	#	#	#	#	#
7	#	.	.	<	.	.	.	.	.	#
8	#	+	.	.	.	#	#	#	#	#
9	#	#	#	.	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	.	.	.	.	.	.	.	.	+	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	.	.	#	#
8	#	#	#	#	.	.	v	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	.	#	#	#	#	#	#	#
6	#	.	.	#	#	#	#	#	.	#
7	#	.	.	.	.	#	#	#	#	#
8	#	<	.	.	.	.	.	.	.	#
9	#	.	.	.	.	.	.	.	.	#
10	#	#	#	#	+	#	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	.	.	^	#	#	#	#
4	+	.	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	.	.	.	.	.	.	.	.	+	#
5	#	.	.	v	.	.	.	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	+	.	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	>	.	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	+	#	#
6	#	#	#	#	#	v	#	.	#	#
7	#	#	#	#	#	.	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	^	#	#	#	#
5	#	#	#	#	+	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	+	#	#	#
8	#	#	#	#	#	v	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	.	#	#	#	#	#	#
5	#	#	#	.	#	#	.	.	#	#
6	#	#	.	<	#	#	#	#	#	#
7	#	#	#	.	#	.	.	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	.	#	.	#	.	#	.	#	#
10	#	#	#	+	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	.	#	.	#	#	#
4	#	#	#	#	.	#	.	#	#	#
5	#	#	#	#	.	#	.	#	#	#
6	#	#	+	.	.	.	^	#	#	#
7	#	#	#	#	.	#	.	#	#	#
8	#	#	#	#	.	#	.	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	.	#	#	#	#	#	#	#
3	#	.	+	#	#	#	#	.	#	#
4	.	.	.	.	.	#	#	#	#	#
5	.	#	.	#	#	#	#	#	#	#
6	.	.	.	.	.	.	.	.	.	#
7	.	#	#	#	#	.	#	#	.	#
8	.	#	#	#	#	.	.	.	.	#
9	>	#	#	#	#	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	#	#	#	<	#	#	#	#
5	#	.	.	.	.	.	.	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	.	.	.	#	#	#	#
8	#	#	#	.	.	.	.	.	.	#
9	#	#	#	.	.	.	.	.	.	#
10	#	#	#	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	+	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	#	#	#	#	#	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	>	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	#	#	#	#	+	#
2	#	#	#	#	#	#	#	.	.	#
3	#	#	.	#	#	.	#	.	#	#
4	.	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	>	.	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	.	#	#	.	#	#	#
10	#	#	#	<	.	.	.	+	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	#	#	.	#
2	#	#	#	#	#	^	.	#	#	#
3	.	.	.	.	.	.	.	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	.	#	.	#	#	.	#	#	#	#
6	.	.	.	.	.	+	.	.	.	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	.	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	#	#
2	#	.	#	.	.	#	#	#	#	#
3	#	.	#	.	.	#	#	#	#	#
4	#	.	#	.	+	#	#	#	#	#
5	#	.	.	.	.	#	#	#	#	#
6	^	.	.	.	.	.	.	.	.	#
7	#	.	#	.	.	#	#	#	#	#
8	#	.	#	.	.	#	#	#	#	#
9	#	.	#	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	.	#	#	#
2	#	#	#	.	#	.	#	.	#	#
3	#	#	#	.	#	.	#	#	#	#
4	#	#	#	.	#	.	#	.	#	#
5	#	.	#	.	#	.	#	#	#	#
6	#	.	.	.	.	v	.	#	#	#
7	#	.	#	.	#	.	#	#	#	#
8	.	+	#	.	#	.	#	#	#	#
9	#	.	#	.	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	>	.	#	#
6	#	#	#	+	#	#	#	.	#	#
7	#	#	#	.	#	#	#	.	#	#
8	#	#	#	.	.	.	.	.	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	.	.	.	#
6	#	#	#	#	.	#	#	#	.	#
7	#	#	#	#	.	#	#	#	+	#
8	#	#	#	#	.	<	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	.	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	.	#	#	<	.	+	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	<	.	+	#	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	.	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	.	.	#	.	#	#	#	#	#	#
4	+	.	#	#	#	#	.	#	#	#
5	.	.	#	#	#	#	.	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	.	.	.	#	.	.	.	.	#	#
8	.	.	^	#	#	#	#	#	#	#
9	.	.	.	#	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	.	v	#	.	#	#
3	#	.	.	.	#	.	.	.	#	#
4	#	#	.	.	#	.	#	.	#	#
5	#	#	.	.	.	.	.	.	#	#
6	#	#	#	#	#	.	#	+	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	^	#
2	#	#	#	#	#	#	#	#	.	#
3	.	.	.	.	.	.	.	#	.	#
4	.	#	#	#	#	#	#	#	+	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	<	.	.	+	#	#	#
2	#	#	.	#	#	.	.	#	#	#
3	#	#	#	#	.	.	#	#	#	#
4	#	#	#	#	#	.	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	.	#	#
2	.	.	.	#	#	>	.	.	#	#
3	#	#	#	#	#	.	#	+	#	#
4	#	#	#	#	#	#	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	.	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	v	#	#	#	#	#
6	#	#	#	.	.	#	#	#	#	#
7	#	#	#	+	.	#	.	.	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	.	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	v	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	+	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	>	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	#	.	.	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	.	#	#	#
2	#	#	#	.	.	#	#	#	#	#
3	#	#	#	#	.	#	#	.	#	#
4	#	#	#	#	.	<	.	#	#	#
5	#	#	#	#	+	#	#	#	.	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	.	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	.	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	.	.	#	#	#	#
4	#	#	.	#	.	.	.	#	#	#
5	#	#	#	#	.	<	#	#	.	#
6	#	#	#	#	+	.	#	#	#	#
7	#	#	.	#	.	#	#	#	#	#
8	#	#	.	#	#	.	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	+	.	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	^	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	+	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	.	.	.	#	#
9	#	#	#	>	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	+	#	#	#	#	#	#
5	.	.	.	.	#	#	#	#	#	#
6	v	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	.	#
4	#	.	#	#	#	#	#	#	.	#
5	#	#	#	.	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	.	.	.	.	+	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	.	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	.	>

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	#	#	#	#	#
2	.	<	#	#	.	#	#	#	#	#
3	#	.	#	.	+	.	#	#	#	#
4	#	.	#	.	.	#	#	#	#	#
5	#	.	.	.	.	#	#	#	#	#
6	#	.	#	.	.	#	.	#	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	<	#	#	#	#	#	#	#
5	#	#	.	#	#	+	#	#	#	#
6	#	#	.	#	#	.	#	#	#	#
7	#	#	.	.	.	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	+	#	#	#	#	#
5	#	.	.	.	.	.	.	#	#	#
6	#	#	#	^	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	.	.	#	#	#	#	#	#	#	#
3	.	v	#	#	#	#	#	#	.	#
4	.	.	#	.	#	#	#	#	#	#
5	+	.	.	.	.	.	.	.	.	#
6	.	.	.	#	#	#	#	#	#	#
7	.	.	#	#	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	+	#	#	#	#
3	#	.	.	.	.	.	#	#	#	#
4	#	^	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	.	#	#	#
4	.	#	.	.	#	>	.	#	#	#
5	.	.	.	.	.	.	.	.	.	#
6	#	.	#	.	.	.	.	#	#	#
7	.	#	#	#	.	.	.	.	#	#
8	#	#	.	#	#	#	.	+	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	^	.	.	.	#	#	#	#	#
2	#	.	.	+	#	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	.	#
9	#	#	#	#	^	.	.	#	#	#
10	#	#	#	#	#	#	+	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	^	#	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	#	.	+	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	#	.	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	.	#	#	#	#	.	.	#	#
3	.	#	#	#	#	.	.	.	#	#
4	.	.	.	.	.	.	.	+	.	#
5	#	#	#	.	.	.	.	.	#	#
6	.	.	.	.	.	.	.	.	.	#
7	#	#	#	.	.	.	.	#	#	#
8	#	#	>	.	.	.	#	#	#	#
9	#	#	#	.	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	.	#	#
2	v	#	#	#	#	#	#	#	#	#
3	.	#	#	#	#	#	#	#	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	.	.	.	.	.	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	+	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	+	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	>	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	#	.	#	#	#	#	#	#	#
5	.	.	.	#	#	#	#	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	.	.	#	#	.	#	#	#	#	#
8	<	.	#	#	#	#	.	.	#	#
9	.	.	#	#	#	#	.	.	.	#
10	#	+	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	.	.	.	v	#	#
5	#	#	+	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	.	#	#	#	#
5	#	#	#	.	#	.	#	#	#	#
6	#	#	#	.	#	.	#	#	#	#
7	#	.	#	.	.	.	#	#	#	#
8	#	.	#	.	.	.	#	#	#	#
9	#	.	.	.	.	v	.	.	.	#
10	+	.	#	#	#	#	#	#	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	#	.	.	>	#	#	#
2	.	.	#	#	.	.	.	#	#	#
3	#	#	#	#	.	#	.	#	#	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	+	#	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	.	#	#	#
3	#	#	.	#	#	.	.	#	#	#
4	#	#	.	#	#	.	.	#	#	#
5	#	#	.	#	#	.	.	#	#	#
6	.	.	+	.	.	.	.	.	.	#
7	#	#	.	#	#	.	.	#	#	#
8	#	#	.	#	#	.	v	.	#	#
9	#	#	.	.	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	>	.	.	#	#	#	#	#	#	#
2	.	#	#	.	#	.	#	#	#	#
3	.	#	#	#	#	#	#	.	#	#
4	.	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	.	#
6	.	#	#	#	#	#	#	#	#	#
7	.	#	.	#	#	#	#	#	#	#
8	+	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	#	.	#
4	#	#	#	#	#	.	.	.	.	#
5	#	#	#	.	#	.	.	.	.	#
6	#	#	#	.	.	.	.	.	.	#
7	.	+	.	.	.	.	.	.	v	#
8	#	#	#	.	#	.	.	.	.	#
9	#	#	#	#	#	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	^	#	#	#	#	#	#	#
6	#	#	+	.	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	^	#	#	.	#	#	#	#	#
8	#	+	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	.	.	.	#	#	#	#	#	#
6	#	.	#	+	#	#	#	#	#	#
7	#	>	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	<	#
7	#	#	#	#	#	#	+	#	.	#
8	#	#	#	#	#	#	.	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	>	.	.	#	#
3	#	#	#	#	#	#	#	.	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	+
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	v	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	.	.	#
9	#	#	#	#	.	.	.	.	#	#
10	#	#	#	#	+	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	v	.	.	.	#	#	#
2	#	#	#	#	#	#	+	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	<	#	#	#	#	#	#	#
6	#	#	.	#	#	#	#	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	+	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	>	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	#	#	#	#	#	.	.	#
10	#	#	#	#	#	#	#	#	+	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	.	#	#	#	#	#	#
2	#	.	#	>	#	#	#	#	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	.	#	#	#	#	#	#
7	.	#	#	.	.	#	#	#	.	#
8	#	#	#	#	+	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	+	#	#	#	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	>	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	+	#	#
3	#	#	#	#	#	#	.	#	.	#
4	#	#	#	#	.	#	>	#	#	#
5	.	#	#	#	.	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	.	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	.	#	.	#	.	#	#	#
4	#	#	.	#	#	#	+	#	#	#
5	#	#	#	.	.	#	.	.	#	#
6	#	#	#	#	#	.	v	#	#	#
7	#	#	#	#	#	#	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	+	.	>	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	.	#	.	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	+	.	>	.	.	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	.	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	.	#	#	#
8	#	#	#	#	.	.	#	#	.	#
9	#	#	#	#	.	.	.	#	#	#
10	#	#	#	#	+	.	>	.	.	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	.	#	.	#	#	#	#	#
7	#	#	.	#	.	#	#	#	#	#
8	#	#	.	#	.	#	#	#	#	#
9	#	#	.	#	.	+	#	#	#	#
10	#	#	>	.	.	.	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	.	#	.	.	.	.	+	.	#	#
7	#	.	.	>	.	.	.	.	.	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	.	.	#	#	#	#	#	#
7	#	^	#	+	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	.	+	#	#	#	#
2	.	.	.	.	.	#	#	#	#	#
3	#	#	#	#	.	<	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	.	#	#	#	.	#	#	.	#
4	.	.	.	.	.	+	#	#	#	#
5	#	v	.	.	.	.	.	#	#	#
6	#	.	#	#	#	.	#	#	#	#
7	#	#	#	#	#	.	#	.	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	#	#	#	#	#
4	#	#	.	#	#	#	#	#	#	#
5	#	#	.	#	#	#	#	#	#	#
6	#	#	<	.	.	.	.	#	#	#
7	#	#	.	#	#	#	#	#	#	#
8	#	#	.	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	.	+	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	#	.	#
5	#	#	#	.	#	.	#	#	.	.
6	#	#	#	#	#	.	.	.	.	.
7	#	#	.	.	.	.	.	.	.	v
8	#	#	#	.	.	+	#	#	.	.
9	#	#	#	#	.	.	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	.	#
2	.	.	#	#	.	.	#	#	+	#
3	.	.	.	.	^	.	.	.	.	#
4	#	#	#	#	.	#	#	#	.	#
5	#	#	#	#	.	#	#	#	.	#
6	#	#	#	#	.	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	#	.	#	#	#	#	#	.	#
4	#	#	#	#	.	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	.	.	.	.	.	.	.	.	+
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	v	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	.	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	<	.	.	#	#	#
5	#	#	#	#	#	#	+	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	.	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	#	#	#	.	#	#	#
5	#	#	#	#	#	#	.	.	#	#
6	.	.	.	.	.	+	.	.	.	#
7	#	#	#	#	#	#	.	#	#	#
8	.	#	.	.	.	.	v	.	.	#
9	#	#	#	.	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	+	#
8	#	#	#	#	#	#	<	.	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	<	#	#	#	#	#	#	#	#	#
8	.	#	#	.	.	.	+	#	#	#
9	.	.	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	+	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	.	#
9	#	#	#	#	#	#	v	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	v	#	#	#	#
4	#	#	#	#	#	.	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	.	#
7	#	#	#	#	#	#	#	#	.	#
8	#	#	#	#	#	#	#	#	+	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	v	#	#	#	#	#	#	#
6	#	#	.	.	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	.	#	#	#	#
9	#	#	#	#	#	.	#	#	#	#
10	#	#	#	#	#	+	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	+	#	#	#	#	#	#
6	#	.	.	.	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	>	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	+	#	#	#	#	#	#
7	#	.	.	.	#	#	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	.	>	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	#	.	#	.	#	#	#	#	.	#
3	.	#	#	#	#	#	.	.	#	#
4	#	.	.	.	.	#	.	+	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	.	#	#
7	#	#	#	.	.	.	.	.	.	^
8	#	#	#	#	#	#	.	#	.	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	.	#	#	#	#	#
2	#	.	.	#	+	#	#	#	#	#
3	#	.	.	#	#	#	#	#	.	#
4	#	>	.	#	#	.	#	#	#	#
5	#	.	.	#	#	#	#	#	#	#
6	#	.	#	#	.	#	#	#	#	#
7	#	.	#	#	#	#	#	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	.	#	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	.	.	.	#	#	#
6	#	#	#	.	.	.	.	#	#	#
7	#	#	#	#	+	.	.	#	#	#
8	#	#	#	#	.	.	.	.	.	#
9	.	#	#	#	.	.	.	.	#	#
10	#	#	#	#	#	#	#	v	.	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	#	.	.	#	#	#	#	#	#
2	.	.	.	.	#	#	#	#	#	#
3	.	.	.	.	.	.	#	#	#	#
4	#	#	.	v	#	#	#	.	.	#
5	#	#	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	.	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	.	#	#	#	#	#	.	#
2	#	.	>	#	#	#	#	#	#	#
3	#	.	.	#	#	#	#	#	#	#
4	#	+	.	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	.	.	.	#	#	.	#
3	#	.	#	.	.	#	#	#	#	#
4	#	#	#	.	.	#	#	#	.	#
5	.	.	.	.	+	.	.	.	.	#
6	#	.	.	.	.	.	.	.	.	#
7	#	#	#	<	.	#	#	#	#	#
8	#	.	#	.	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	+	.	.	.	.	.	.	.	.	#
7	.	.	v	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	.	#	#
4	.	#	#	#	#	.	#	#	.	#
5	.	#	#	#	#	.	#	#	#	#
6	#	#	#	.	#	.	#	#	#	#
7	#	#	#	.	#	.	#	#	#	#
8	#	#	#	+	.	.	.	.	.	#
9	#	#	.	.	.	v	.	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	#	#	#	#
2	#	#	.	#	#	.	#	#	#	#
3	#	#	.	#	.	.	.	#	#	#
4	#	#	.	#	.	.	.	#	#	#
5	#	.	>	.	.	.	.	+	#	#
6	#	#	.	#	.	.	.	#	#	#
7	#	#	.	#	#	.	#	#	#	#
8	#	#	.	#	#	.	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	.
2	.	.	.	.	#	#	#	#	#	+
3	#	#	#	#	#	#	#	#	#	.
4	.	.	.	.	.	.	.	.	#	.
5	#	#	#	#	#	#	#	#	#	.
6	#	#	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	^
8	#	#	#	#	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	#	#	#
2	.	#	#	#	#	#	#	#	#	#
3	>	#	#	#	#	#	#	#	#	#
4	.	.	.	.	.	#	#	#	#	#
5	.	.	.	.	#	#	#	#	#	#
6	#	#	#	+	.	.	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	+	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	.	#	#	#	#	#
10	#	#	^	.	.	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	<	+	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	.	#
9	#	.	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	.	.	#	#	.	#	#	#	#	#
3	.	^	.	.	#	#	#	#	#	#
4	#	+	#	#	#	#	#	#	#	#
5	#	.	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	+	#	#	#	#	#	#	#	#
4	.	.	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	.	#	#	#	#	#	#	#	#	#
8	.	^	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	#	#	#	#	#	#	#	#	.	.
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	#	#	#	.	#
5	#	#	#	#	#	#	#	#	.	#
6	#	#	#	#	#	#	#	#	.	^
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	#	#	.	#	#	.	#	#	#	#
5	#	.	#	.	.	>	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	+	.	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	.	#	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	.	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	.	#
5	#	.	#	#	#	#	#	.	#	#
6	#	+	#	#	#	#	#	#	#	#
7	#	.	#	.	.	.	.	.	.	#
8	#	<	#	.	.	.	.	.	.	#
9	#	.	#	.	#	#	#	.	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	.	#	#	#	.	#	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	#	+	.	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	.	<	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	+	.	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	#	.	<	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	+	.	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	<	.	.	.	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	+	.	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	<	.	.	.	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	#	#	#
2	.	.	.	#	.	#	#	#	#	#
3	.	.	.	#	#	#	#	#	#	#
4	.	.	.	.	<	.	#	#	#	#
5	.	.	.	#	#	#	#	#	#	#
6	.	.	#	#	#	#	#	#	#	#
7	+	#	#	#	#	.	.	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	#	#	#	#	#
2	.	.	#	#	#	#	#	#	#	#
3	.	.	#	#	#	#	#	.	#	#
4	+	.	.	.	#	#	#	#	#	#
5	.	.	.	.	.	.	.	#	#	#
6	.	.	#	.	#	#	#	#	#	#
7	.	#	.	.	.	.	.	.	.	#
8	.	#	#	^	#	.	#	.	#	#
9	#	#	#	.	#	.	#	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	>	.	#	#	#	#	#
3	#	#	#	#	.	.	.	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	#	#	#	#	#	+	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	.	#	#	.	.	#
4	#	#	#	#	.	#	#	.	.	v
5	#	.	#	#	.	#	#	.	.	.
6	#	#	#	#	.	.	#	.	.	#
7	#	#	#	.	.	.	.	.	.	#
8	#	#	.	.	+	.	.	.	.	#
9	#	#	#	#	.	#	#	.	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	.	+	#	#	#	#	#	#	#
7	>	.	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	.	+	#	#	#	#	#	#
8	#	>	.	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	^	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	.	.	.	#	#	#	#	#	#
9	#	+	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	#	#
2	.	.	.	.	+	.	#	#	#	#
3	#	#	#	#	#	.	#	#	#	#
4	.	.	.	.	.	.	.	>	#	#
5	#	#	#	#	#	.	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	.	+	#	#	#	#
2	#	#	#	#	.	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	<	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	.	.	.	.	#	^	.	#	.	#
4	.	.	.	.	.	.	.	.	.	#
5	#	#	#	#	#	#	.	#	+	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	.	#	#	.	.	#
2	.	#	#	.	.	#	#	#	.	#
3	.	.	.	^	.	.	.	#	+	#
4	#	#	#	.	.	#	.	.	.	#
5	#	#	#	.	.	#	#	#	.	#
6	#	#	.	#	.	#	#	#	.	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	+	.	#	#	#
5	#	#	#	#	#	#	.	#	#	#
6	#	#	#	#	#	.	.	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	<	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	.	#	#	#	#	#
2	.	.	#	.	.	#	#	#	#	#
3	>	.	.	.	.	#	#	#	#	#
4	.	#	#	.	.	#	.	#	#	#
5	.	#	#	.	+	#	.	#	#	#
6	.	#	#	#	.	#	#	#	#	#
7	.	#	#	#	.	#	#	#	#	#
8	#	#	#	#	.	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	.	#	#
2	#	#	#	#	#	#	#	.	#	#
3	#	.	.	#	#	#	#	v	#	#
4	#	#	#	#	#	#	.	.	#	#
5	.	.	.	.	.	.	.	.	.	#
6	#	#	#	#	.	.	.	.	#	#
7	#	#	#	#	#	+	.	.	#	#
8	#	#	#	#	#	#	.	.	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	#	#	#	^	.	.	.	.
2	.	.	.	.	#	#	#	.	#	+
3	#	#	#	.	#	#	#	.	#	.
4	#	#	#	#	#	#	#	#	#	.
5	#	#	#	#	#	#	#	#	#	.
6	.	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	.	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	>	#	#	#	#	#	#	#	#
2	.	.	.	.	.	.	#	#	#	#
3	.	.	#	#	#	#	#	#	#	#
4	.	.	.	#	#	#	#	#	#	#
5	+	.	.	.	.	.	.	.	#	#
6	.	.	#	#	#	#	#	#	#	#
7	.	.	#	#	#	#	#	#	#	#
8	.	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	.	>	#	#	#	#	#	#
5	#	#	+	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	+	#	#	#	#	#	#	#	#
3	<	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	turnRight
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	.	.	.	.	.	.	#	#	#	#
4	.	#	#	#	#	+	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	.	<	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	.	.	.	.	.	.	#	#	#	#
5	.	#	#	#	#	+	#	#	#	#
6	.	#	#	#	#	#	#	#	#	#
7	.	<	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	.	#	#	#
3	#	#	.	.	#	#	#	.	#	#
4	#	#	.	.	#	#	.	.	.	#
5	#	.	>	.	.	.	.	.	.	#
6	.	.	.	.	.	.	.	.	.	+
7	#	#	#	.	#	#	.	.	.	#
8	#	#	#	.	#	#	#	.	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	#	#	#	#	.	#	#
2	#	#	#	#	.	#	.	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	#	#	#	#	#	#	#
6	#	.	#	#	#	#	#	#	#	#
7	#	#	.	#	.	#	#	.	#	#
8	#	#	.	#	.	.	#	.	#	#
9	#	#	>	#	.	.	#	.	.	#
10	#	#	.	.	.	.	.	.	.	+

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	.	.	.	#	#	.	.	.	#
2	.	.	.	.	#	#	#	#	#	#
3	<	.	.	.	+	.	#	#	#	#
4	.	.	.	.	#	#	#	.	#	#
5	#	.	#	.	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	+
2	#	#	#	#	#	#	#	#	#	.
3	#	#	#	#	#	#	#	#	#	.
4	.	.	.	.	.	.	.	.	#	.
5	#	#	#	.	#	#	#	#	#	v
6	#	.	#	#	#	#	#	#	#	.
7	#	#	#	#	#	#	#	#	#	.
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	>	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	.	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	.	#	#	.	#	#	#	#
4	#	.	#	#	#	.	#	#	#	#
5	#	#	#	#	#	^	#	#	#	#
6	#	#	.	.	.	+	.	.	#	#
7	#	#	#	#	#	.	#	#	.	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	.	#	#	#	#	#	#	#	#
2	#	.	#	#	^	#	#	#	#	#
3	#	.	.	.	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	+	.	#	#	#	#	#	#	#	#
2	#	.	#	#	^	#	#	#	#	#
3	#	.	.	.	.	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	#	#	.	#
2	.	.	#	#	#	#	#	#	v	#
3	.	.	.	.	.	.	.	#	.	#
4	#	#	#	#	#	#	#	.	.	#
5	#	#	#	#	#	#	#	#	.	#
6	.	.	.	.	.	.	.	.	.	#
7	#	.	#	#	#	.	.	#	.	#
8	#	#	#	#	#	.	.	#	.	#
9	#	#	#	#	#	.	.	#	.	#
10	#	#	#	#	#	+	.	.	.	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	.	#
2	#	#	.	.	#	#	#	#	.	#
3	#	#	.	.	#	.	#	.	.	#
4	>	.	.	.	.	.	.	.	.	#
5	#	#	.	.	#	#	#	#	.	#
6	#	#	#	.	#	#	#	#	.	#
7	#	#	#	.	.	.	.	.	+	#
8	#	#	.	#	#	#	#	#	.	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	.	.	#	.	#
2	#	#	#	#	#	#	.	^	#	#
3	#	#	#	#	#	#	+	.	#	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	#	.	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	.	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	.	#	#	#	#	#	#
5	#	#	#	.	.	#	#	#	#	#
6	#	#	#	.	+	#	#	#	#	#
7	#	#	#	v	.	.	.	.	#	#
8	#	#	#	.	.	#	#	#	#	#
9	#	#	#	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	#	#	#	.	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	.	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	.	#	#	#	#
7	#	.	#	#	#	.	#	#	#	#
8	.	#	#	>	.	.	#	#	#	#
9	#	#	#	#	#	+	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	.	.	.	v	#	#	#	#	#	#
3	#	#	#	.	#	.	#	#	#	#
4	#	#	+	.	#	#	#	#	#	#
5	#	#	#	.	#	#	#	#	#	#
6	#	.	#	.	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	.	#	#	.	.	#	#	#	#	#
2	.	.	.	<	.	#	#	#	#	#
3	#	#	#	.	.	#	#	#	#	#
4	#	#	#	.	.	#	.	#	#	#
5	#	#	.	.	.	.	#	#	#	#
6	#	#	#	.	.	.	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	.	#	#	#	.	#	#	#	#	#
9	.	#	#	#	.	.	.	.	.	#
10	#	#	#	#	+	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	.	#
3	#	.	#	#	#	#	.	.	.	#
4	#	#	#	#	.	#	#	.	.	#
5	#	#	#	#	.	.	#	.	.	#
6	#	#	#	#	.	.	.	.	^	#
7	+	.	.	.	.	.	.	.	.	#
8	#	#	.	#	.	.	#	.	.	#
9	#	#	#	.	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	<
9	#	#	#	#	#	+	.	.	.	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	.	#	#	#	#	#
4	#	#	#	#	.	.	#	#	#	#
5	#	#	#	#	.	.	#	#	#	#
6	#	#	#	#	.	.	#	#	#	#
7	#	.	.	.	.	+	.	.	.	#
8	#	>	#	#	.	.	#	#	#	#
9	#	#	#	#	.	.	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	.	+	#
3	#	#	#	#	#	#	#	<	.	#
4	#	#	#	#	.	#	#	#	#	#
5	#	#	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	.	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	.	#	#	.	.	#	#	.	#	#
6	#	#	#	.	>	#	#	#	.	#
7	#	#	#	+	.	#	#	#	#	#
8	#	#	#	.	#	#	#	#	#	#
9	#	#	.	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnRight
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	+	#	#	#	#	#	#
4	#	.	.	.	#	#	#	#	#	#
5	#	^	#	#	#	#	#	#	#	#
6	#	#	#	#	#	#	#	#	#	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	.	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	>	.	#	#
5	.	.	.	.	.	.	.	.	#	#
6	.	.	.	.	.	.	.	.	+	#
7	#	#	#	#	#	#	#	#	#	#
8	#	#	#	#	#	.	#	#	#	#
9	#	#	#	#	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	turnRight
	moveForward
	moveForward
	turnLeft
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	.	#
2	#	#	#	#	#	#	#	#	<	#
3	#	#	#	#	#	#	#	#	.	#
4	#	#	#	#	#	.	#	+	.	#
5	#	#	#	#	#	#	#	#	.	#
6	.	#	#	#	#	#	#	#	.	#
7	#	#	.	#	#	#	.	#	#	#
8	#	#	#	#	#	#	#	#	#	#
9	.	#	#	#	#	#	#	#	.	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	.	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	.	#	.	.	#
4	#	#	#	#	#	#	#	.	#	#
5	#	#	#	#	#	#	.	.	#	#
6	#	#	#	#	#	#	#	.	#	#
7	#	#	.	.	.	.	.	.	+	#
8	#	#	#	#	#	#	#	.	#	#
9	#	#	.	#	#	#	#	>	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	turnLeft
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	#	.	.	.	.	<	#
6	#	#	#	#	.	#	#	#	#	#
7	#	#	#	#	.	#	#	#	#	#
8	#	#	+	#	.	#	#	#	#	#
9	#	#	.	.	.	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	#	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	#
3	#	#	#	#	#	#	#	#	#	#
4	#	#	#	#	#	#	#	#	#	#
5	#	#	#	.	.	.	.	<	#	#
6	#	#	#	.	#	#	#	#	#	#
7	#	#	#	.	#	#	#	#	#	#
8	#	+	#	.	#	#	#	#	#	#
9	#	.	.	.	#	#	#	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	#	.	#	#	#	#	#	#
2	#	#	#	#	#	#	#	#	#	.
3	#	.	#	.	#	#	#	#	#	.
4	#	#	#	#	#	#	#	#	#	.
5	.	#	#	#	#	#	.	.	#	v
6	#	#	#	#	#	.	.	.	.	.
7	#	#	#	.	#	.	.	.	#	.
8	#	.	#	#	#	.	.	.	#	.
9	#	#	#	+	.	.	.	.	.	.
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
"You are an expert in the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic action blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

In this domain, a task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.

Below I am giving you a task. You are going to act as an expert in this domain to synthesize a solution code for the given task, while using only the available coding blocks. A solution code for a task brings the AVATAR to the GOAL when executed.
Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.
","
--- Task 1: Grid ---
 	1	2	3	4	5	6	7	8	9	10
1	#	#	.	#	#	.	.	#	#	#
2	.	.	>	.	.	.	.	#	#	#
3	#	#	.	#	#	#	.	#	#	#
4	.	.	.	.	.	.	.	#	#	#
5	.	.	.	.	.	.	.	.	#	#
6	#	#	#	#	#	#	.	#	#	#
7	#	#	#	#	.	.	.	.	#	#
8	#	#	#	#	#	#	+	.	#	#
9	#	#	.	#	#	#	.	#	#	#
10	#	#	#	#	#	#	#	#	#	#

--- Task 1: Solution ---
","def Run(){
	moveForward
	moveForward
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}
"
