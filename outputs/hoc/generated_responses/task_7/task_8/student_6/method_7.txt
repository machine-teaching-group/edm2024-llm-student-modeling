You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
		turnLeft
		moveForward
	}
}

--- Target Task 1: Grid ---
1	#	#	#	.	#	#	#	#	#	#	
2	.	.	.	.	#	#	#	#	#	#	
3	.	#	#	.	#	#	#	#	#	#	
4	^	#	#	.	#	#	#	#	#	#	
5	#	#	#	.	#	#	#	#	#	#	
6	.	.	.	.	#	#	#	#	#	#	
7	#	#	#	.	#	#	#	#	#	#	
8	#	#	#	+	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}

--- Target Task 1: Student attempt ---
Sure, I'd be happy to help you with this!
So, from the reference task and student attempt, we can observe that the student is trying to solve the task by moving the avatar towards the goal cell using the moveForward block. However, there are a few misconceptions in the student's attempt code:

The student is using the moveForward block without checking if the avatar can move forward. In the reference solution, the moveForward block is used only when the pathAhead block returns true, indicating that the avatar can move forward.
The student is not using the turnLeft and turnRight blocks to change the direction of the avatar. In the reference solution, the turnLeft and turnRight blocks are used to change the direction of the avatar when it reaches a wall cell.
The student is not using the RepeatUntil block to repeat the code until the goal is reached. In the reference solution, the RepeatUntil block is used to repeat the code until the goal block returns true.
Based on these observations, I would expect the student's attempt code for the target task to look something like this:
def Run(){
RepeatUntil(goal){
If(pathAhead){
moveForward
}
Else{
turnRight
}
}
}
In this code, the student is likely to use the same mistake as in the reference task, i.e., moving the avatar towards the goal without checking if it can move forward, and not using the turnLeft and turnRight blocks to change the direction of the av