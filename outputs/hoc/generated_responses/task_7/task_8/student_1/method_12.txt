You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	RepeatUntil(goal){
		If(pathLeft){
			turnLeft
			moveForward
		}
		Else{
			moveForward
		}
	}
}

--- Target Task 1: Grid ---
1	#	#	#	.	#	#	#	#	#	#	
2	.	.	.	.	#	#	#	#	#	#	
3	.	#	#	.	#	#	#	#	#	#	
4	^	#	#	.	#	#	#	#	#	#	
5	#	#	#	.	#	#	#	#	#	#	
6	.	.	.	.	#	#	#	#	#	#	
7	#	#	#	.	#	#	#	#	#	#	
8	#	#	#	+	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnRight
		}
	}
}

--- Target Task 1: Student attempt ---
The student attempt for the reference task 1 is as follows:

def Run(){
RepeatUntil(goal){
If(pathLeft){
turnLeft
moveForward
}
Else{
moveForward
}
}
}

The student's attempt code has a few misconceptions and behavior issues:

Incorrect use of loops: The student has used a RepeatUntil loop, but the condition for repeating the loop is not properly defined. The loop will repeat indefinitely, causing the avatar to move in an infinite loop.
Lack of understanding of navigation blocks: The student has used the turnLeft block inside the RepeatUntil loop, which will make the avatar turn left every time it reaches the end of the loop, instead of moving forward.
Incorrect use of conditional statements: The student has used an Else statement without a corresponding If statement. This will cause the avatar to move forward regardless of whether the path is clear or not.
Failure to account for walls: The student's code does not check for walls, which means the avatar will crash into walls if it moves forward without checking for obstacles.
Now, let's synthesize an attempt code for the target task 1, assuming the student has the same misconceptions and behavior issues:

def Run(){
RepeatUntil(goal){
If(pathLeft){
turnLeft
moveForward
}
Else{
moveForward
}
}
}

This attempt code has the same issues as the reference task 1 attempt code. The student has used a RepeatUntil loop without properly defining the condition for repeating the loop, and has used the turnLeft block inside the loop, which will make the avatar turn left every time it reaches the end of the loop instead of moving forward. Additionally, the student has not accounted for walls, which means the avatar will crash into walls if it moves forward without checking for obstacles.

The correct solution for the target task 1 is as follows:

def Run(){
RepeatUntil(goal){
If(pathAhead){
moveForward
}
Else{
turnRight
}
}
}

The solution code uses a RepeatUntil loop that repeats until the goal is reached. The loop checks for