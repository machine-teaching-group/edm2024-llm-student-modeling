You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	turnLeft
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	.	#	#	.	#	#	#	
5	#	#	#	.	.	.	.	+	#	#	
6	#	#	#	.	#	#	#	#	#	#	
7	#	#	#	.	#	#	#	#	#	#	
8	#	#	#	.	#	#	#	#	#	#	
9	#	>	.	.	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			turnRight
			moveForward
		}
		Else{
			moveForward
		}
	}
}

--- Target Task 1: Student attempt ---
The student attempt code for the reference task is as follows:




def Run(){
    moveForward
    turnLeft
    moveForward
    moveForward
    moveForward
    moveForward
    turnLeft
    moveForward
    moveForward
    moveForward
    moveForward
    moveForward
}
The student attempt code for the target task is likely to be similar to the reference task attempt code, with a few changes to accommodate the different grid layout. Here's a possible attempt code:




def Run(){
    moveForward
    moveForward
    turnLeft
    RepeatUntil(goal){
        If(pathRight){
            moveForward
        }else{
            turnLeft
        }
    }
}
The student's behavior and misconceptions in the attempt code for the reference task are:

The student has not used any loops or conditionals in their code, instead relying on a sequence of moveForward and turnLeft commands to navigate the grid.
The student has not checked for the goal condition, instead assuming that the avatar will reach the goal automatically.
The student has not handled the case where the avatar encounters a wall, and will likely crash into it.
In the attempt code for the target task, the student is likely to make similar mistakes, with the addition of a RepeatUntil loop to navigate the grid. However, the student may not have realized that the goal is located in a different position in the target task, and may not have adjusted their code accordingly. Additionally, the student may not have handled the case where the avatar encounters a wall, and will likely crash into it.

Overall, the student's attempt codes for both tasks demonstrate a lack of understanding of the basic navigation blocks, loops, and conditionals in the visual programming language, and a lack of attention to the specific requirements of the task.