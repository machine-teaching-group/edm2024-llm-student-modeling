You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	.	#	#	#	#	#	#	#	
5	+	.	.	.	.	.	.	#	#	#	
6	#	#	#	.	#	#	.	#	#	#	
7	#	#	#	.	#	#	.	#	#	#	
8	#	#	#	#	#	#	.	#	#	#	
9	#	#	#	#	#	>	.	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	RepeatUntil(goal){
		If(pathAhead){
			moveForward
		}
		Else{
			turnLeft
		}
	}
}

--- Reference Task 1: Student attempt ---
def Run(){
	RepeatUntil(goal){
		moveForward
		turnLeft
		moveForward
		turnLeft
		moveForward
	}
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	.	#	#	.	#	#	#	
5	#	#	#	.	.	.	.	+	#	#	
6	#	#	#	.	#	#	#	#	#	#	
7	#	#	#	.	#	#	#	#	#	#	
8	#	#	#	.	#	#	#	#	#	#	
9	#	>	.	.	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	moveForward
	turnLeft
	RepeatUntil(goal){
		If(pathRight){
			turnRight
			moveForward
		}
		Else{
			moveForward
		}
	}
}

--- Target Task 1: Student attempt ---
Based on the reference task, its solution code, and the student's attempt, it's clear that the student has some misconceptions and behaviors that can be observed in their coding approach. Let's analyze the student's behavior and misconceptions in the attempt code for the reference task before generating a new attempt code for the target task.

**Student's Behavior and Misconceptions in Reference Task Attempt:**

1. **Lack of Conditional Check:** In the student's attempt, they repeatedly execute the sequence of `moveForward` and `turnLeft` without any conditional check. This shows a misunderstanding of the need to check whether there is a path ahead (`pathAhead`) or if the goal is reached (`goal`) before deciding to move forward or turn.

2. **No Condition Loop:** The student's code does not include a conditional loop (like `RepeatUntil`) to control the execution of commands based on a condition. Instead, they have an uncontrolled loop of moving forward and turning left, which will not lead to a solution.

3. **Inefficient Movement:** The student's approach is inefficient as they keep turning left and moving forward without considering the actual maze structure. This inefficiency is evident in their attempt's execution.

4. **Ignoring Maze Layout:** The student does not take into account the maze layout (presence of walls, the direction of the avatar, etc.) when making decisions on movement. Their code lacks any logic to adapt to the maze's actual structure.

Now, let's generate a new attempt code for the target task, assuming the same student's behavior and misconceptions.

**Student's Attempt for Target Task (Assuming Same Behavior and Misconceptions):**

```python
def Run():
    RepeatUntil(goal){
        moveForward
        moveForward
        moveForward
        turnLeft
        moveForward
        moveForward
        moveForward
        turnLeft
        moveForward
        moveForward
        moveForward
    }
}
```

In this new attempt for the target task, the student continues to exhibit the same misconceptions and behaviors as seen in the reference task attempt. They repeatedly execute a sequence of `moveForward` and `turnLeft` without considering any condition checks or adapting to the maze layout. This attempt is unlikely to solve the target task and reflects the student's persistent misunderstandings.