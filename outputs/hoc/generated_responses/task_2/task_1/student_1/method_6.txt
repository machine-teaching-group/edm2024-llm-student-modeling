You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnLeft
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	#	#	#	#	#	#	
6	#	#	v	#	#	#	#	#	#	#	
7	+	#	.	#	#	#	#	#	#	#	
8	.	.	.	#	#	#	#	#	#	#	
9	.	#	.	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	moveForward
	turnRight
	moveForward
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
The student attempt for the reference task 1 is incomplete and shows some misconceptions. Here's what the student has done:

The student moves forward three times using moveForward commands, which takes them to the third row.
Then they turn left once, which changes their orientation but doesn't affect their position.
Finally, they call moveForward again without checking whether there's a wall ahead or not. This causes the avatar to crash into the wall at the end of the third row.
The student seems to have misunderstood how the moveForward command works. They seem to think that it always moves the avatar one step forward regardless of any obstacles in the way. Also, they haven't used any loops or conditionals to control the movement of the avatar.

Now let's synthesize an attempt code for the target task 1 that reflects the student's behavior and misconceptions. Here's what we might expect the student to write:

def Run(){
    // Move forward twice to reach the middle row
    moveForward
    moveForward
    
    // Turn right to face the goal
    turnRight
    
    // Move forward four times to reach the goal
    moveForward
    moveForward
    moveForward
    moveForward
}
In this attempt, the student repeats the mistake of moving forward multiple times without checking for walls. They also use a single turnRight command to change the avatar's orientation, which won't work since the avatar needs to turn right twice to face the goal. Additionally, the student hasn't used any loops or conditionals to handle different scenarios, such as encountering a wall or reaching the goal.