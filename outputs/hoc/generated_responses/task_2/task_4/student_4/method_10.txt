You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnRight
	turnLeft
	turnRight
	moveForward
	turnLeft
	turnLeft
	turnRight
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	v	#	#	#	#	#	#	
6	#	#	#	.	.	#	#	#	#	#	
7	#	#	#	#	+	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
Great, let's dive into the tasks you provided!
Reference Task 1:
The solution code for this task is:




def Run(){
        moveForward
        turnLeft
        moveForward
        turnRight
        moveForward
}
The student's attempt code is:




def Run(){
        moveForward
        turnRight
        turnLeft
        turnRight
        moveForward
}
Here are some observations and explanations of the student's behavior and misconceptions:

The student incorrectly used turnRight instead of turnLeft in the second line of the code. This is a common mistake, as the student may have gotten the directions mixed up.
The student correctly used moveForward in the third line of the code, but they did not use it in the fourth line, where it is needed to move the avatar forward again. This suggests that the student may not have fully understood the need for repetition in the code.
In the fifth line, the student used turnRight again, but they did not need to do so. This shows that the student may not have been paying close attention to the code or may not have fully understood the task.
The student correctly used moveForward in the seventh line, but they did not use it in the eighth line, where it is needed to move the avatar forward again. This suggests that the student may not have fully understood the need for repetition in the code.
Target Task 1:
The solution code for this task is:




def Run(){

        moveForward

}
The student's attempt code is:




def Run(){

moveForward

}
Here are some observations and explanations of the student's behavior and misconceptions:

The student correctly used moveForward in the code without any errors. However, they did not use any conditionals or loops in their code, which suggests that they may not have fully understood how to use these blocks in their code.
The student did not use any blocks in the code to check for the avatar's position or to move it to the goal. This shows that the student may not have fully understood