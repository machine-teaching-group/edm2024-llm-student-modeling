You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	v	#	#	#	#	#	#	
6	#	#	#	.	.	#	#	#	#	#	
7	#	#	#	#	+	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
Based on the provided reference and target tasks, I will analyze the student's behavior and misconceptions in the attempt code for the reference task, and then generate an attempt code for the target task that captures the same student's behavior and misconceptions.
Reference Task 1: Student attempt
The student's attempt code for the reference task is as follows:




def Run(){
        moveForward
        turnLeft
        moveForward
        turnRight
        moveForward
}
Misconceptions:

The student has not understood the concept of movement blocks. They have used the moveForward block multiple times without any condition, which is not necessary in this task.
The student has not used the turnLeft and turnRight blocks correctly. They have used turnLeft and turnRight blocks without any condition, which means the AVATAR will turn left or right every time the code is executed, regardless of the current location.
The student has not used the moveForward block correctly. They have used moveForward block without any condition, which means the AVATAR will move forward every time the code is executed, regardless of the current location.
Target Task 1: Student attempt
Based on the student's behavior and misconceptions in the reference task, I will generate an attempt code for the target task that captures the same mistakes:



def Run(){
        moveForward
        turnLeft
        moveForward
        turnRight
        moveForward
}
Explanation:

The student has not understood the concept of movement blocks. They have used the moveForward block multiple times without any condition, which is not necessary in this task.
The student has not used the turnLeft and turnRight blocks correctly. They have used turnLeft and turnRight blocks without any condition, which means the AVATAR will turn left or right every time the code is executed, regardless of the current location.
The student has not used the moveForward block correctly. They have used moveForward block without any condition, which means the AVATAR will move forward every time the code is executed, regardless of the current location.