You are working on the visual programming domain Classic Maze Challenge from https://code.org/ 
In this domain, the following types of coding blocks are available.
- Basic navigation blocks: moveForward, turnLeft, turnRight.
- Boolean conditions: pathAhead, pathLeft, pathRight, goal
- Loops: RepeatUntil(boolean){}
- Conditionals: If(boolean){}, If(boolean){}Else{}.

A task is represented as a 10x10 visual grid.
This grid contains WALL cells, FREE cells, a GOAL cell, and an AVATAR (with specific location and direction).
We represent a task's 10x10 visual grid with the following symbols.
'#' represents a WALL cell.
'+' represents the GOAL cell.
'>' represents AVATAR's location on a cell, facing East direction.
'<' represents AVATAR's location on a cell, facing West direction.
'^' represents AVATAR's location on a cell, facing North direction.
'v' represents AVATAR's location on a cell, facing South direction.
A solution code for a task brings the AVATAR to the GOAL when executed. Note that the AVATAR can only move between FREE cells and will crash if it tries to go to a WALL cell.

First, I give you below a reference task, its solution code, and an attempt code from a student on the reference task. Observe and explain the student's behavior and misconceptions in the attempt code.

Second, I give you a new target task with its solution code. You are going to play the role of the given student. Synthesize an attempt code that is likely to be written by the same student, i.e capturing the student's behavior and misconceptions shown on the reference task.

--- Reference Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	#	.	+	#	#	#	#	
6	#	#	#	>	.	#	#	#	#	#	
7	#	#	#	#	#	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Reference Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Reference Task 1: Student attempt ---
def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}

--- Target Task 1: Grid ---
1	#	#	#	#	#	#	#	#	#	#	
2	#	#	#	#	#	#	#	#	#	#	
3	#	#	#	#	#	#	#	#	#	#	
4	#	#	#	#	#	#	#	#	#	#	
5	#	#	#	v	#	#	#	#	#	#	
6	#	#	#	.	.	#	#	#	#	#	
7	#	#	#	#	+	#	#	#	#	#	
8	#	#	#	#	#	#	#	#	#	#	
9	#	#	#	#	#	#	#	#	#	#	
10	#	#	#	#	#	#	#	#	#	#	

--- Target Task 1: Solution ---
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}

--- Target Task 1: Student attempt ---
In the reference task, the student's attempt code and the reference solution code are as follows:

**Reference Task 1: Student attempt**
```python
def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
```

**Reference Task 1: Solution**
```python
def Run(){
	moveForward
	turnLeft
	moveForward
	turnRight
	moveForward
}
```

Now, let's analyze the student's behavior and misconceptions in the attempt code:

1. **Missing `turnRight`:** The most significant misconception in the student's attempt is the absence of the `turnRight` command. In the reference solution, after moving forward twice, the avatar makes a right turn to navigate to the goal. However, in the student's attempt, the avatar moves forward three times without changing direction. This results in the avatar facing the wrong direction, preventing it from reaching the goal.

2. **Incorrect Understanding of the Maze:** The student seems to misunderstand the maze layout. They assume that they can reach the goal by moving forward multiple times in a straight line. This indicates a lack of understanding of the importance of turning the avatar in the right direction to navigate around obstacles.

3. **No Consideration for Maze Walls:** The student's attempt does not include any conditional checks (e.g., `pathAhead`) to verify whether the path ahead is clear or blocked by a wall. This shows a lack of understanding of the need to check for obstacles before moving the avatar.

4. **Failure to Adjust for Avatar's Initial Orientation:** The student's code does not account for the initial orientation of the avatar (facing right). This oversight results in the avatar moving in the wrong direction without correcting its orientation.

Now, let's create an attempt code for the new target task that captures the same student's behavior and misconceptions:

**Target Task 1: Student attempt (Synthesized)**
```python
def Run(){
	moveForward
	turnLeft
	moveForward
	moveForward
}
```

In this synthesized attempt, we maintain the same misconceptions and behaviors as in the reference task attempt:

- The student still fails to include the `turnRight` command, leading to an incorrect direction.
- They attempt to move forward multiple times without considering the avatar's direction and without checking for obstacles.
- The code does not adapt to the avatar's initial orientation, assuming it always starts facing the same direction.

This synthesized attempt replicates the student's misconceptions and errors observed in the reference task attempt.